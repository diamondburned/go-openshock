// Code generated by ogen, DO NOT EDIT.

package openshock

import (
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

// AccountSignUpV2BadRequest is response for AccountSignUpV2 operation.
type AccountSignUpV2BadRequest struct{}

func (*AccountSignUpV2BadRequest) accountSignUpV2Res() {}

type AccountSignUpV2Conflict OpenShockProblem

func (*AccountSignUpV2Conflict) accountSignUpV2Res() {}

type AccountSignUpV2Forbidden OpenShockProblem

func (*AccountSignUpV2Forbidden) accountSignUpV2Res() {}

// AdminGetOnlineDevicesUnauthorized is response for AdminGetOnlineDevices operation.
type AdminGetOnlineDevicesUnauthorized struct{}

func (*AdminGetOnlineDevicesUnauthorized) adminGetOnlineDevicesRes() {}

// Ref: #/components/schemas/AdminOnlineDeviceResponse
type AdminOnlineDeviceResponse struct {
	ID              OptUUID       `json:"id"`
	Name            OptNilString  `json:"name"`
	Owner           OptGenericIni `json:"owner"`
	FirmwareVersion OptNilString  `json:"firmwareVersion"`
	Gateway         OptNilString  `json:"gateway"`
	ConnectedAt     OptDateTime   `json:"connectedAt"`
}

// GetID returns the value of ID.
func (s *AdminOnlineDeviceResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *AdminOnlineDeviceResponse) GetName() OptNilString {
	return s.Name
}

// GetOwner returns the value of Owner.
func (s *AdminOnlineDeviceResponse) GetOwner() OptGenericIni {
	return s.Owner
}

// GetFirmwareVersion returns the value of FirmwareVersion.
func (s *AdminOnlineDeviceResponse) GetFirmwareVersion() OptNilString {
	return s.FirmwareVersion
}

// GetGateway returns the value of Gateway.
func (s *AdminOnlineDeviceResponse) GetGateway() OptNilString {
	return s.Gateway
}

// GetConnectedAt returns the value of ConnectedAt.
func (s *AdminOnlineDeviceResponse) GetConnectedAt() OptDateTime {
	return s.ConnectedAt
}

// SetID sets the value of ID.
func (s *AdminOnlineDeviceResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *AdminOnlineDeviceResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetOwner sets the value of Owner.
func (s *AdminOnlineDeviceResponse) SetOwner(val OptGenericIni) {
	s.Owner = val
}

// SetFirmwareVersion sets the value of FirmwareVersion.
func (s *AdminOnlineDeviceResponse) SetFirmwareVersion(val OptNilString) {
	s.FirmwareVersion = val
}

// SetGateway sets the value of Gateway.
func (s *AdminOnlineDeviceResponse) SetGateway(val OptNilString) {
	s.Gateway = val
}

// SetConnectedAt sets the value of ConnectedAt.
func (s *AdminOnlineDeviceResponse) SetConnectedAt(val OptDateTime) {
	s.ConnectedAt = val
}

// Ref: #/components/schemas/AdminOnlineDeviceResponseIEnumerableBaseResponse
type AdminOnlineDeviceResponseIEnumerableBaseResponse struct {
	Message OptNilString                         `json:"message"`
	Data    OptNilAdminOnlineDeviceResponseArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *AdminOnlineDeviceResponseIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *AdminOnlineDeviceResponseIEnumerableBaseResponse) GetData() OptNilAdminOnlineDeviceResponseArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *AdminOnlineDeviceResponseIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *AdminOnlineDeviceResponseIEnumerableBaseResponse) SetData(val OptNilAdminOnlineDeviceResponseArray) {
	s.Data = val
}

func (*AdminOnlineDeviceResponseIEnumerableBaseResponse) adminGetOnlineDevicesRes() {}

// Ref: #/components/schemas/BooleanNullableBaseResponse
type BooleanNullableBaseResponse struct {
	Message OptNilString `json:"message"`
	Data    OptNilBool   `json:"data"`
}

// GetMessage returns the value of Message.
func (s *BooleanNullableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *BooleanNullableBaseResponse) GetData() OptNilBool {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *BooleanNullableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *BooleanNullableBaseResponse) SetData(val OptNilBool) {
	s.Data = val
}

func (*BooleanNullableBaseResponse) shockerPauseShockerRes() {}

// Ref: #/components/schemas/Control
type Control struct {
	ID        OptUUID        `json:"id"`
	Type      OptControlType `json:"type"`
	Intensity OptInt32       `json:"intensity"`
	Duration  OptInt32       `json:"duration"`
	Exclusive OptBool        `json:"exclusive"`
}

// GetID returns the value of ID.
func (s *Control) GetID() OptUUID {
	return s.ID
}

// GetType returns the value of Type.
func (s *Control) GetType() OptControlType {
	return s.Type
}

// GetIntensity returns the value of Intensity.
func (s *Control) GetIntensity() OptInt32 {
	return s.Intensity
}

// GetDuration returns the value of Duration.
func (s *Control) GetDuration() OptInt32 {
	return s.Duration
}

// GetExclusive returns the value of Exclusive.
func (s *Control) GetExclusive() OptBool {
	return s.Exclusive
}

// SetID sets the value of ID.
func (s *Control) SetID(val OptUUID) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Control) SetType(val OptControlType) {
	s.Type = val
}

// SetIntensity sets the value of Intensity.
func (s *Control) SetIntensity(val OptInt32) {
	s.Intensity = val
}

// SetDuration sets the value of Duration.
func (s *Control) SetDuration(val OptInt32) {
	s.Duration = val
}

// SetExclusive sets the value of Exclusive.
func (s *Control) SetExclusive(val OptBool) {
	s.Exclusive = val
}

// Ref: #/components/schemas/ControlLogSenderLight
type ControlLogSenderLight struct {
	ID         OptUUID      `json:"id"`
	Name       OptNilString `json:"name"`
	Image      OptNilURI    `json:"image"`
	CustomName OptNilString `json:"customName"`
}

// GetID returns the value of ID.
func (s *ControlLogSenderLight) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ControlLogSenderLight) GetName() OptNilString {
	return s.Name
}

// GetImage returns the value of Image.
func (s *ControlLogSenderLight) GetImage() OptNilURI {
	return s.Image
}

// GetCustomName returns the value of CustomName.
func (s *ControlLogSenderLight) GetCustomName() OptNilString {
	return s.CustomName
}

// SetID sets the value of ID.
func (s *ControlLogSenderLight) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ControlLogSenderLight) SetName(val OptNilString) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *ControlLogSenderLight) SetImage(val OptNilURI) {
	s.Image = val
}

// SetCustomName sets the value of CustomName.
func (s *ControlLogSenderLight) SetCustomName(val OptNilString) {
	s.CustomName = val
}

// Ref: #/components/schemas/ControlRequest
type ControlRequest struct {
	Shocks     OptNilControlArray `json:"shocks"`
	CustomName OptNilString       `json:"customName"`
}

// GetShocks returns the value of Shocks.
func (s *ControlRequest) GetShocks() OptNilControlArray {
	return s.Shocks
}

// GetCustomName returns the value of CustomName.
func (s *ControlRequest) GetCustomName() OptNilString {
	return s.CustomName
}

// SetShocks sets the value of Shocks.
func (s *ControlRequest) SetShocks(val OptNilControlArray) {
	s.Shocks = val
}

// SetCustomName sets the value of CustomName.
func (s *ControlRequest) SetCustomName(val OptNilString) {
	s.CustomName = val
}

// Ref: #/components/schemas/ControlType
type ControlType string

const (
	ControlTypeStop    ControlType = "Stop"
	ControlTypeShock   ControlType = "Shock"
	ControlTypeVibrate ControlType = "Vibrate"
	ControlTypeSound   ControlType = "Sound"
)

// AllValues returns all ControlType values.
func (ControlType) AllValues() []ControlType {
	return []ControlType{
		ControlTypeStop,
		ControlTypeShock,
		ControlTypeVibrate,
		ControlTypeSound,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ControlType) MarshalText() ([]byte, error) {
	switch s {
	case ControlTypeStop:
		return []byte(s), nil
	case ControlTypeShock:
		return []byte(s), nil
	case ControlTypeVibrate:
		return []byte(s), nil
	case ControlTypeSound:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ControlType) UnmarshalText(data []byte) error {
	switch ControlType(data) {
	case ControlTypeStop:
		*s = ControlTypeStop
		return nil
	case ControlTypeShock:
		*s = ControlTypeShock
		return nil
	case ControlTypeVibrate:
		*s = ControlTypeVibrate
		return nil
	case ControlTypeSound:
		*s = ControlTypeSound
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateShareCode
type CreateShareCode struct {
	Permissions OptShockerPermissions `json:"permissions"`
	Limits      OptShockerLimits      `json:"limits"`
}

// GetPermissions returns the value of Permissions.
func (s *CreateShareCode) GetPermissions() OptShockerPermissions {
	return s.Permissions
}

// GetLimits returns the value of Limits.
func (s *CreateShareCode) GetLimits() OptShockerLimits {
	return s.Limits
}

// SetPermissions sets the value of Permissions.
func (s *CreateShareCode) SetPermissions(val OptShockerPermissions) {
	s.Permissions = val
}

// SetLimits sets the value of Limits.
func (s *CreateShareCode) SetLimits(val OptShockerLimits) {
	s.Limits = val
}

// Ref: #/components/schemas/CreateTokenRequest
type CreateTokenRequest struct {
	Name        OptNilString              `json:"name"`
	Permissions OptNilPermissionTypeArray `json:"permissions"`
	ValidUntil  OptNilDate                `json:"validUntil"`
}

// GetName returns the value of Name.
func (s *CreateTokenRequest) GetName() OptNilString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *CreateTokenRequest) GetPermissions() OptNilPermissionTypeArray {
	return s.Permissions
}

// GetValidUntil returns the value of ValidUntil.
func (s *CreateTokenRequest) GetValidUntil() OptNilDate {
	return s.ValidUntil
}

// SetName sets the value of Name.
func (s *CreateTokenRequest) SetName(val OptNilString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *CreateTokenRequest) SetPermissions(val OptNilPermissionTypeArray) {
	s.Permissions = val
}

// SetValidUntil sets the value of ValidUntil.
func (s *CreateTokenRequest) SetValidUntil(val OptNilDate) {
	s.ValidUntil = val
}

// Ref: #/components/schemas/DeviceEdit
type DeviceEdit struct {
	Name OptNilString `json:"name"`
}

// GetName returns the value of Name.
func (s *DeviceEdit) GetName() OptNilString {
	return s.Name
}

// SetName sets the value of Name.
func (s *DeviceEdit) SetName(val OptNilString) {
	s.Name = val
}

// Ref: #/components/schemas/DeviceSelfResponse
type DeviceSelfResponse struct {
	ID       OptUUID                   `json:"id"`
	Name     OptNilString              `json:"name"`
	Shockers OptNilMinimalShockerArray `json:"shockers"`
}

// GetID returns the value of ID.
func (s *DeviceSelfResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *DeviceSelfResponse) GetName() OptNilString {
	return s.Name
}

// GetShockers returns the value of Shockers.
func (s *DeviceSelfResponse) GetShockers() OptNilMinimalShockerArray {
	return s.Shockers
}

// SetID sets the value of ID.
func (s *DeviceSelfResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *DeviceSelfResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetShockers sets the value of Shockers.
func (s *DeviceSelfResponse) SetShockers(val OptNilMinimalShockerArray) {
	s.Shockers = val
}

// Ref: #/components/schemas/DeviceSelfResponseBaseResponse
type DeviceSelfResponseBaseResponse struct {
	Message OptNilString          `json:"message"`
	Data    OptDeviceSelfResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *DeviceSelfResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *DeviceSelfResponseBaseResponse) GetData() OptDeviceSelfResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *DeviceSelfResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *DeviceSelfResponseBaseResponse) SetData(val OptDeviceSelfResponse) {
	s.Data = val
}

// DevicesGetLiveControlGatewayInfoInternalServerError is response for DevicesGetLiveControlGatewayInfo operation.
type DevicesGetLiveControlGatewayInfoInternalServerError struct{}

func (*DevicesGetLiveControlGatewayInfoInternalServerError) devicesGetLiveControlGatewayInfoRes() {}

type DevicesGetLiveControlGatewayInfoNotFound OpenShockProblem

func (*DevicesGetLiveControlGatewayInfoNotFound) devicesGetLiveControlGatewayInfoRes() {}

type DevicesGetLiveControlGatewayInfoPreconditionFailed OpenShockProblem

func (*DevicesGetLiveControlGatewayInfoPreconditionFailed) devicesGetLiveControlGatewayInfoRes() {}

// DevicesRegenerateDeviceTokenInternalServerError is response for DevicesRegenerateDeviceToken operation.
type DevicesRegenerateDeviceTokenInternalServerError struct{}

func (*DevicesRegenerateDeviceTokenInternalServerError) devicesRegenerateDeviceTokenRes() {}

// Ref: #/components/schemas/EditTokenRequest
type EditTokenRequest struct {
	Name        OptNilString              `json:"name"`
	Permissions OptNilPermissionTypeArray `json:"permissions"`
}

// GetName returns the value of Name.
func (s *EditTokenRequest) GetName() OptNilString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *EditTokenRequest) GetPermissions() OptNilPermissionTypeArray {
	return s.Permissions
}

// SetName sets the value of Name.
func (s *EditTokenRequest) SetName(val OptNilString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *EditTokenRequest) SetPermissions(val OptNilPermissionTypeArray) {
	s.Permissions = val
}

// Ref: #/components/schemas/GenericIni
type GenericIni struct {
	ID    OptUUID      `json:"id"`
	Name  OptNilString `json:"name"`
	Image OptNilURI    `json:"image"`
}

// GetID returns the value of ID.
func (s *GenericIni) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *GenericIni) GetName() OptNilString {
	return s.Name
}

// GetImage returns the value of Image.
func (s *GenericIni) GetImage() OptNilURI {
	return s.Image
}

// SetID sets the value of ID.
func (s *GenericIni) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *GenericIni) SetName(val OptNilString) {
	s.Name = val
}

// SetImage sets the value of Image.
func (s *GenericIni) SetImage(val OptNilURI) {
	s.Image = val
}

// Ref: #/components/schemas/GuidBaseResponse
type GuidBaseResponse struct {
	Message OptNilString `json:"message"`
	Data    OptUUID      `json:"data"`
}

// GetMessage returns the value of Message.
func (s *GuidBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *GuidBaseResponse) GetData() OptUUID {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *GuidBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *GuidBaseResponse) SetData(val OptUUID) {
	s.Data = val
}

func (*GuidBaseResponse) shockerRegisterShockerRes()        {}
func (*GuidBaseResponse) shockerShockerShareCodeCreateRes() {}

// Ref: #/components/schemas/LcgNodeResponse
type LcgNodeResponse struct {
	Fqdn    OptNilString `json:"fqdn"`
	Country OptNilString `json:"country"`
}

// GetFqdn returns the value of Fqdn.
func (s *LcgNodeResponse) GetFqdn() OptNilString {
	return s.Fqdn
}

// GetCountry returns the value of Country.
func (s *LcgNodeResponse) GetCountry() OptNilString {
	return s.Country
}

// SetFqdn sets the value of Fqdn.
func (s *LcgNodeResponse) SetFqdn(val OptNilString) {
	s.Fqdn = val
}

// SetCountry sets the value of Country.
func (s *LcgNodeResponse) SetCountry(val OptNilString) {
	s.Country = val
}

// Ref: #/components/schemas/LcgNodeResponseBaseResponse
type LcgNodeResponseBaseResponse struct {
	Message OptNilString       `json:"message"`
	Data    OptLcgNodeResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *LcgNodeResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *LcgNodeResponseBaseResponse) GetData() OptLcgNodeResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *LcgNodeResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *LcgNodeResponseBaseResponse) SetData(val OptLcgNodeResponse) {
	s.Data = val
}

func (*LcgNodeResponseBaseResponse) deviceGetLiveControlGatewayRes() {}

// Ref: #/components/schemas/LcgResponse
type LcgResponse struct {
	Gateway OptNilString `json:"gateway"`
	Country OptNilString `json:"country"`
}

// GetGateway returns the value of Gateway.
func (s *LcgResponse) GetGateway() OptNilString {
	return s.Gateway
}

// GetCountry returns the value of Country.
func (s *LcgResponse) GetCountry() OptNilString {
	return s.Country
}

// SetGateway sets the value of Gateway.
func (s *LcgResponse) SetGateway(val OptNilString) {
	s.Gateway = val
}

// SetCountry sets the value of Country.
func (s *LcgResponse) SetCountry(val OptNilString) {
	s.Country = val
}

// Ref: #/components/schemas/LcgResponseBaseResponse
type LcgResponseBaseResponse struct {
	Message OptNilString   `json:"message"`
	Data    OptLcgResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *LcgResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *LcgResponseBaseResponse) GetData() OptLcgResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *LcgResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *LcgResponseBaseResponse) SetData(val OptLcgResponse) {
	s.Data = val
}

func (*LcgResponseBaseResponse) devicesGetLiveControlGatewayInfoRes() {}

// Ref: #/components/schemas/LogEntry
type LogEntry struct {
	ID           OptUUID                  `json:"id"`
	CreatedOn    OptDateTime              `json:"createdOn"`
	Type         OptControlType           `json:"type"`
	ControlledBy OptControlLogSenderLight `json:"controlledBy"`
	Intensity    OptInt32                 `json:"intensity"`
	Duration     OptInt32                 `json:"duration"`
}

// GetID returns the value of ID.
func (s *LogEntry) GetID() OptUUID {
	return s.ID
}

// GetCreatedOn returns the value of CreatedOn.
func (s *LogEntry) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetType returns the value of Type.
func (s *LogEntry) GetType() OptControlType {
	return s.Type
}

// GetControlledBy returns the value of ControlledBy.
func (s *LogEntry) GetControlledBy() OptControlLogSenderLight {
	return s.ControlledBy
}

// GetIntensity returns the value of Intensity.
func (s *LogEntry) GetIntensity() OptInt32 {
	return s.Intensity
}

// GetDuration returns the value of Duration.
func (s *LogEntry) GetDuration() OptInt32 {
	return s.Duration
}

// SetID sets the value of ID.
func (s *LogEntry) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *LogEntry) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetType sets the value of Type.
func (s *LogEntry) SetType(val OptControlType) {
	s.Type = val
}

// SetControlledBy sets the value of ControlledBy.
func (s *LogEntry) SetControlledBy(val OptControlLogSenderLight) {
	s.ControlledBy = val
}

// SetIntensity sets the value of Intensity.
func (s *LogEntry) SetIntensity(val OptInt32) {
	s.Intensity = val
}

// SetDuration sets the value of Duration.
func (s *LogEntry) SetDuration(val OptInt32) {
	s.Duration = val
}

// Ref: #/components/schemas/LogEntryIEnumerableBaseResponse
type LogEntryIEnumerableBaseResponse struct {
	Message OptNilString        `json:"message"`
	Data    OptNilLogEntryArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *LogEntryIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *LogEntryIEnumerableBaseResponse) GetData() OptNilLogEntryArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *LogEntryIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *LogEntryIEnumerableBaseResponse) SetData(val OptNilLogEntryArray) {
	s.Data = val
}

func (*LogEntryIEnumerableBaseResponse) shockerGetShockerLogsRes() {}

// Ref: #/components/schemas/Login
type Login struct {
	Password OptNilString `json:"password"`
	Email    OptNilString `json:"email"`
}

// GetPassword returns the value of Password.
func (s *Login) GetPassword() OptNilString {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *Login) GetEmail() OptNilString {
	return s.Email
}

// SetPassword sets the value of Password.
func (s *Login) SetPassword(val OptNilString) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *Login) SetEmail(val OptNilString) {
	s.Email = val
}

// Ref: #/components/schemas/LoginV2
type LoginV2 struct {
	Password          string `json:"password"`
	Email             string `json:"email"`
	TurnstileResponse string `json:"turnstileResponse"`
}

// GetPassword returns the value of Password.
func (s *LoginV2) GetPassword() string {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *LoginV2) GetEmail() string {
	return s.Email
}

// GetTurnstileResponse returns the value of TurnstileResponse.
func (s *LoginV2) GetTurnstileResponse() string {
	return s.TurnstileResponse
}

// SetPassword sets the value of Password.
func (s *LoginV2) SetPassword(val string) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *LoginV2) SetEmail(val string) {
	s.Email = val
}

// SetTurnstileResponse sets the value of TurnstileResponse.
func (s *LoginV2) SetTurnstileResponse(val string) {
	s.TurnstileResponse = val
}

// Ref: #/components/schemas/MinimalShocker
type MinimalShocker struct {
	ID    OptUUID             `json:"id"`
	RfId  OptInt32            `json:"rfId"`
	Model OptShockerModelType `json:"model"`
}

// GetID returns the value of ID.
func (s *MinimalShocker) GetID() OptUUID {
	return s.ID
}

// GetRfId returns the value of RfId.
func (s *MinimalShocker) GetRfId() OptInt32 {
	return s.RfId
}

// GetModel returns the value of Model.
func (s *MinimalShocker) GetModel() OptShockerModelType {
	return s.Model
}

// SetID sets the value of ID.
func (s *MinimalShocker) SetID(val OptUUID) {
	s.ID = val
}

// SetRfId sets the value of RfId.
func (s *MinimalShocker) SetRfId(val OptInt32) {
	s.RfId = val
}

// SetModel sets the value of Model.
func (s *MinimalShocker) SetModel(val OptShockerModelType) {
	s.Model = val
}

// Ref: #/components/schemas/NewShocker
type NewShocker struct {
	Name   OptNilString        `json:"name"`
	RfId   OptInt32            `json:"rfId"`
	Device OptUUID             `json:"device"`
	Model  OptShockerModelType `json:"model"`
}

// GetName returns the value of Name.
func (s *NewShocker) GetName() OptNilString {
	return s.Name
}

// GetRfId returns the value of RfId.
func (s *NewShocker) GetRfId() OptInt32 {
	return s.RfId
}

// GetDevice returns the value of Device.
func (s *NewShocker) GetDevice() OptUUID {
	return s.Device
}

// GetModel returns the value of Model.
func (s *NewShocker) GetModel() OptShockerModelType {
	return s.Model
}

// SetName sets the value of Name.
func (s *NewShocker) SetName(val OptNilString) {
	s.Name = val
}

// SetRfId sets the value of RfId.
func (s *NewShocker) SetRfId(val OptInt32) {
	s.RfId = val
}

// SetDevice sets the value of Device.
func (s *NewShocker) SetDevice(val OptUUID) {
	s.Device = val
}

// SetModel sets the value of Model.
func (s *NewShocker) SetModel(val OptShockerModelType) {
	s.Model = val
}

// Ref: #/components/schemas/ObjectBaseResponse
type ObjectBaseResponse struct {
	Message OptNilString `json:"message"`
	Data    jx.Raw       `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ObjectBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ObjectBaseResponse) GetData() jx.Raw {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ObjectBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ObjectBaseResponse) SetData(val jx.Raw) {
	s.Data = val
}

func (*ObjectBaseResponse) accountLoginRes()                   {}
func (*ObjectBaseResponse) accountLoginV2Res()                 {}
func (*ObjectBaseResponse) accountPasswordResetCheckValidRes() {}
func (*ObjectBaseResponse) accountPasswordResetCompleteRes()   {}
func (*ObjectBaseResponse) accountSignUpRes()                  {}
func (*ObjectBaseResponse) accountSignUpV2Res()                {}
func (*ObjectBaseResponse) devicesEditDeviceRes()              {}
func (*ObjectBaseResponse) devicesRegenerateDeviceTokenRes()   {}
func (*ObjectBaseResponse) devicesRemoveDeviceRes()            {}
func (*ObjectBaseResponse) shareLinksAddShockerRes()           {}
func (*ObjectBaseResponse) shareLinksDeleteShareLinkRes()      {}
func (*ObjectBaseResponse) shareLinksRemoveShockerRes()        {}
func (*ObjectBaseResponse) sharesDeleteShareCodeRes()          {}
func (*ObjectBaseResponse) sharesLinkShareCodeRes()            {}
func (*ObjectBaseResponse) shockerEditShockerRes()             {}
func (*ObjectBaseResponse) shockerRemoveShockerRes()           {}
func (*ObjectBaseResponse) shockerSendControlDEPRECATEDRes()   {}
func (*ObjectBaseResponse) shockerSendControlRes()             {}
func (*ObjectBaseResponse) shockerShockerShareCodePauseRes()   {}
func (*ObjectBaseResponse) shockerShockerShareCodeRemoveRes()  {}
func (*ObjectBaseResponse) shockerShockerShareCodeUpdateRes()  {}
func (*ObjectBaseResponse) tokensDeleteTokenRes()              {}
func (*ObjectBaseResponse) tokensEditTokenRes()                {}

// Ref: #/components/schemas/OpenShockProblem
type OpenShockProblem struct {
	Type     OptNilString `json:"type"`
	Title    OptNilString `json:"title"`
	Status   OptNilInt32  `json:"status"`
	Detail   OptNilString `json:"detail"`
	Instance OptNilString `json:"instance"`
	// Deprecated: schema marks this property as deprecated.
	Message         OptNilString `json:"message"`
	TraceId         OptNilString `json:"traceId"`
	AdditionalProps OpenShockProblemAdditional
}

// GetType returns the value of Type.
func (s *OpenShockProblem) GetType() OptNilString {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *OpenShockProblem) GetTitle() OptNilString {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *OpenShockProblem) GetStatus() OptNilInt32 {
	return s.Status
}

// GetDetail returns the value of Detail.
func (s *OpenShockProblem) GetDetail() OptNilString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *OpenShockProblem) GetInstance() OptNilString {
	return s.Instance
}

// GetMessage returns the value of Message.
func (s *OpenShockProblem) GetMessage() OptNilString {
	return s.Message
}

// GetTraceId returns the value of TraceId.
func (s *OpenShockProblem) GetTraceId() OptNilString {
	return s.TraceId
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *OpenShockProblem) GetAdditionalProps() OpenShockProblemAdditional {
	return s.AdditionalProps
}

// SetType sets the value of Type.
func (s *OpenShockProblem) SetType(val OptNilString) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *OpenShockProblem) SetTitle(val OptNilString) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *OpenShockProblem) SetStatus(val OptNilInt32) {
	s.Status = val
}

// SetDetail sets the value of Detail.
func (s *OpenShockProblem) SetDetail(val OptNilString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *OpenShockProblem) SetInstance(val OptNilString) {
	s.Instance = val
}

// SetMessage sets the value of Message.
func (s *OpenShockProblem) SetMessage(val OptNilString) {
	s.Message = val
}

// SetTraceId sets the value of TraceId.
func (s *OpenShockProblem) SetTraceId(val OptNilString) {
	s.TraceId = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *OpenShockProblem) SetAdditionalProps(val OpenShockProblemAdditional) {
	s.AdditionalProps = val
}

func (*OpenShockProblem) accountLoginRes()                   {}
func (*OpenShockProblem) accountLoginV2Res()                 {}
func (*OpenShockProblem) accountPasswordResetCheckValidRes() {}
func (*OpenShockProblem) accountPasswordResetCompleteRes()   {}
func (*OpenShockProblem) accountSignUpRes()                  {}
func (*OpenShockProblem) deviceGetLiveControlGatewayRes()    {}
func (*OpenShockProblem) devicePairDEPRECATEDRes()           {}
func (*OpenShockProblem) devicePairRes()                     {}
func (*OpenShockProblem) devicesEditDeviceRes()              {}
func (*OpenShockProblem) devicesGetDeviceByIdRes()           {}
func (*OpenShockProblem) devicesGetOtaUpdateHistoryRes()     {}
func (*OpenShockProblem) devicesGetPairCodeRes()             {}
func (*OpenShockProblem) devicesGetShockersRes()             {}
func (*OpenShockProblem) devicesRegenerateDeviceTokenRes()   {}
func (*OpenShockProblem) devicesRemoveDeviceRes()            {}
func (*OpenShockProblem) publicGetShareLinkRes()             {}
func (*OpenShockProblem) shareLinksDeleteShareLinkRes()      {}
func (*OpenShockProblem) shareLinksEditShockerRes()          {}
func (*OpenShockProblem) shareLinksPauseShockerRes()         {}
func (*OpenShockProblem) shareLinksRemoveShockerRes()        {}
func (*OpenShockProblem) sharesDeleteShareCodeRes()          {}
func (*OpenShockProblem) shockerEditShockerRes()             {}
func (*OpenShockProblem) shockerGetShockerByIdRes()          {}
func (*OpenShockProblem) shockerGetShockerLogsRes()          {}
func (*OpenShockProblem) shockerGetShockerSharesRes()        {}
func (*OpenShockProblem) shockerPauseShockerRes()            {}
func (*OpenShockProblem) shockerRemoveShockerRes()           {}
func (*OpenShockProblem) shockerShockerShareCodeCreateRes()  {}
func (*OpenShockProblem) shockerShockerShareCodeListRes()    {}
func (*OpenShockProblem) shockerShockerShareCodePauseRes()   {}
func (*OpenShockProblem) shockerShockerShareCodeRemoveRes()  {}
func (*OpenShockProblem) shockerShockerShareCodeUpdateRes()  {}
func (*OpenShockProblem) tokensDeleteTokenRes()              {}
func (*OpenShockProblem) tokensEditTokenRes()                {}
func (*OpenShockProblem) tokensGetTokenByIdRes()             {}

type OpenShockProblemAdditional map[string]jx.Raw

func (s *OpenShockProblemAdditional) init() OpenShockProblemAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type OpenShockToken struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *OpenShockToken) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *OpenShockToken) SetAPIKey(val string) {
	s.APIKey = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptControlLogSenderLight returns new OptControlLogSenderLight with value set to v.
func NewOptControlLogSenderLight(v ControlLogSenderLight) OptControlLogSenderLight {
	return OptControlLogSenderLight{
		Value: v,
		Set:   true,
	}
}

// OptControlLogSenderLight is optional ControlLogSenderLight.
type OptControlLogSenderLight struct {
	Value ControlLogSenderLight
	Set   bool
}

// IsSet returns true if OptControlLogSenderLight was set.
func (o OptControlLogSenderLight) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptControlLogSenderLight) Reset() {
	var v ControlLogSenderLight
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptControlLogSenderLight) SetTo(v ControlLogSenderLight) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptControlLogSenderLight) Get() (v ControlLogSenderLight, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptControlLogSenderLight) Or(d ControlLogSenderLight) ControlLogSenderLight {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptControlRequest returns new OptControlRequest with value set to v.
func NewOptControlRequest(v ControlRequest) OptControlRequest {
	return OptControlRequest{
		Value: v,
		Set:   true,
	}
}

// OptControlRequest is optional ControlRequest.
type OptControlRequest struct {
	Value ControlRequest
	Set   bool
}

// IsSet returns true if OptControlRequest was set.
func (o OptControlRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptControlRequest) Reset() {
	var v ControlRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptControlRequest) SetTo(v ControlRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptControlRequest) Get() (v ControlRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptControlRequest) Or(d ControlRequest) ControlRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptControlType returns new OptControlType with value set to v.
func NewOptControlType(v ControlType) OptControlType {
	return OptControlType{
		Value: v,
		Set:   true,
	}
}

// OptControlType is optional ControlType.
type OptControlType struct {
	Value ControlType
	Set   bool
}

// IsSet returns true if OptControlType was set.
func (o OptControlType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptControlType) Reset() {
	var v ControlType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptControlType) SetTo(v ControlType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptControlType) Get() (v ControlType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptControlType) Or(d ControlType) ControlType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateShareCode returns new OptCreateShareCode with value set to v.
func NewOptCreateShareCode(v CreateShareCode) OptCreateShareCode {
	return OptCreateShareCode{
		Value: v,
		Set:   true,
	}
}

// OptCreateShareCode is optional CreateShareCode.
type OptCreateShareCode struct {
	Value CreateShareCode
	Set   bool
}

// IsSet returns true if OptCreateShareCode was set.
func (o OptCreateShareCode) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateShareCode) Reset() {
	var v CreateShareCode
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateShareCode) SetTo(v CreateShareCode) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateShareCode) Get() (v CreateShareCode, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateShareCode) Or(d CreateShareCode) CreateShareCode {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTokenRequest returns new OptCreateTokenRequest with value set to v.
func NewOptCreateTokenRequest(v CreateTokenRequest) OptCreateTokenRequest {
	return OptCreateTokenRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateTokenRequest is optional CreateTokenRequest.
type OptCreateTokenRequest struct {
	Value CreateTokenRequest
	Set   bool
}

// IsSet returns true if OptCreateTokenRequest was set.
func (o OptCreateTokenRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTokenRequest) Reset() {
	var v CreateTokenRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTokenRequest) SetTo(v CreateTokenRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTokenRequest) Get() (v CreateTokenRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTokenRequest) Or(d CreateTokenRequest) CreateTokenRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeviceEdit returns new OptDeviceEdit with value set to v.
func NewOptDeviceEdit(v DeviceEdit) OptDeviceEdit {
	return OptDeviceEdit{
		Value: v,
		Set:   true,
	}
}

// OptDeviceEdit is optional DeviceEdit.
type OptDeviceEdit struct {
	Value DeviceEdit
	Set   bool
}

// IsSet returns true if OptDeviceEdit was set.
func (o OptDeviceEdit) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeviceEdit) Reset() {
	var v DeviceEdit
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeviceEdit) SetTo(v DeviceEdit) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeviceEdit) Get() (v DeviceEdit, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeviceEdit) Or(d DeviceEdit) DeviceEdit {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDeviceSelfResponse returns new OptDeviceSelfResponse with value set to v.
func NewOptDeviceSelfResponse(v DeviceSelfResponse) OptDeviceSelfResponse {
	return OptDeviceSelfResponse{
		Value: v,
		Set:   true,
	}
}

// OptDeviceSelfResponse is optional DeviceSelfResponse.
type OptDeviceSelfResponse struct {
	Value DeviceSelfResponse
	Set   bool
}

// IsSet returns true if OptDeviceSelfResponse was set.
func (o OptDeviceSelfResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDeviceSelfResponse) Reset() {
	var v DeviceSelfResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDeviceSelfResponse) SetTo(v DeviceSelfResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDeviceSelfResponse) Get() (v DeviceSelfResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDeviceSelfResponse) Or(d DeviceSelfResponse) DeviceSelfResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEditTokenRequest returns new OptEditTokenRequest with value set to v.
func NewOptEditTokenRequest(v EditTokenRequest) OptEditTokenRequest {
	return OptEditTokenRequest{
		Value: v,
		Set:   true,
	}
}

// OptEditTokenRequest is optional EditTokenRequest.
type OptEditTokenRequest struct {
	Value EditTokenRequest
	Set   bool
}

// IsSet returns true if OptEditTokenRequest was set.
func (o OptEditTokenRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEditTokenRequest) Reset() {
	var v EditTokenRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEditTokenRequest) SetTo(v EditTokenRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEditTokenRequest) Get() (v EditTokenRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEditTokenRequest) Or(d EditTokenRequest) EditTokenRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGenericIni returns new OptGenericIni with value set to v.
func NewOptGenericIni(v GenericIni) OptGenericIni {
	return OptGenericIni{
		Value: v,
		Set:   true,
	}
}

// OptGenericIni is optional GenericIni.
type OptGenericIni struct {
	Value GenericIni
	Set   bool
}

// IsSet returns true if OptGenericIni was set.
func (o OptGenericIni) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGenericIni) Reset() {
	var v GenericIni
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGenericIni) SetTo(v GenericIni) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGenericIni) Get() (v GenericIni, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGenericIni) Or(d GenericIni) GenericIni {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLcgNodeResponse returns new OptLcgNodeResponse with value set to v.
func NewOptLcgNodeResponse(v LcgNodeResponse) OptLcgNodeResponse {
	return OptLcgNodeResponse{
		Value: v,
		Set:   true,
	}
}

// OptLcgNodeResponse is optional LcgNodeResponse.
type OptLcgNodeResponse struct {
	Value LcgNodeResponse
	Set   bool
}

// IsSet returns true if OptLcgNodeResponse was set.
func (o OptLcgNodeResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLcgNodeResponse) Reset() {
	var v LcgNodeResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLcgNodeResponse) SetTo(v LcgNodeResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLcgNodeResponse) Get() (v LcgNodeResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLcgNodeResponse) Or(d LcgNodeResponse) LcgNodeResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLcgResponse returns new OptLcgResponse with value set to v.
func NewOptLcgResponse(v LcgResponse) OptLcgResponse {
	return OptLcgResponse{
		Value: v,
		Set:   true,
	}
}

// OptLcgResponse is optional LcgResponse.
type OptLcgResponse struct {
	Value LcgResponse
	Set   bool
}

// IsSet returns true if OptLcgResponse was set.
func (o OptLcgResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLcgResponse) Reset() {
	var v LcgResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLcgResponse) SetTo(v LcgResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLcgResponse) Get() (v LcgResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLcgResponse) Or(d LcgResponse) LcgResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLogin returns new OptLogin with value set to v.
func NewOptLogin(v Login) OptLogin {
	return OptLogin{
		Value: v,
		Set:   true,
	}
}

// OptLogin is optional Login.
type OptLogin struct {
	Value Login
	Set   bool
}

// IsSet returns true if OptLogin was set.
func (o OptLogin) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLogin) Reset() {
	var v Login
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLogin) SetTo(v Login) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLogin) Get() (v Login, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLogin) Or(d Login) Login {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLoginV2 returns new OptLoginV2 with value set to v.
func NewOptLoginV2(v LoginV2) OptLoginV2 {
	return OptLoginV2{
		Value: v,
		Set:   true,
	}
}

// OptLoginV2 is optional LoginV2.
type OptLoginV2 struct {
	Value LoginV2
	Set   bool
}

// IsSet returns true if OptLoginV2 was set.
func (o OptLoginV2) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLoginV2) Reset() {
	var v LoginV2
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLoginV2) SetTo(v LoginV2) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLoginV2) Get() (v LoginV2, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLoginV2) Or(d LoginV2) LoginV2 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNewShocker returns new OptNewShocker with value set to v.
func NewOptNewShocker(v NewShocker) OptNewShocker {
	return OptNewShocker{
		Value: v,
		Set:   true,
	}
}

// OptNewShocker is optional NewShocker.
type OptNewShocker struct {
	Value NewShocker
	Set   bool
}

// IsSet returns true if OptNewShocker was set.
func (o OptNewShocker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNewShocker) Reset() {
	var v NewShocker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNewShocker) SetTo(v NewShocker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNewShocker) Get() (v NewShocker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNewShocker) Or(d NewShocker) NewShocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAdminOnlineDeviceResponseArray returns new OptNilAdminOnlineDeviceResponseArray with value set to v.
func NewOptNilAdminOnlineDeviceResponseArray(v []AdminOnlineDeviceResponse) OptNilAdminOnlineDeviceResponseArray {
	return OptNilAdminOnlineDeviceResponseArray{
		Value: v,
		Set:   true,
	}
}

// OptNilAdminOnlineDeviceResponseArray is optional nullable []AdminOnlineDeviceResponse.
type OptNilAdminOnlineDeviceResponseArray struct {
	Value []AdminOnlineDeviceResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAdminOnlineDeviceResponseArray was set.
func (o OptNilAdminOnlineDeviceResponseArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAdminOnlineDeviceResponseArray) Reset() {
	var v []AdminOnlineDeviceResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAdminOnlineDeviceResponseArray) SetTo(v []AdminOnlineDeviceResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAdminOnlineDeviceResponseArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAdminOnlineDeviceResponseArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []AdminOnlineDeviceResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAdminOnlineDeviceResponseArray) Get() (v []AdminOnlineDeviceResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAdminOnlineDeviceResponseArray) Or(d []AdminOnlineDeviceResponse) []AdminOnlineDeviceResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilControlArray returns new OptNilControlArray with value set to v.
func NewOptNilControlArray(v []Control) OptNilControlArray {
	return OptNilControlArray{
		Value: v,
		Set:   true,
	}
}

// OptNilControlArray is optional nullable []Control.
type OptNilControlArray struct {
	Value []Control
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilControlArray was set.
func (o OptNilControlArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilControlArray) Reset() {
	var v []Control
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilControlArray) SetTo(v []Control) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilControlArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilControlArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []Control
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilControlArray) Get() (v []Control, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilControlArray) Or(d []Control) []Control {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDate returns new OptNilDate with value set to v.
func NewOptNilDate(v time.Time) OptNilDate {
	return OptNilDate{
		Value: v,
		Set:   true,
	}
}

// OptNilDate is optional nullable time.Time.
type OptNilDate struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDate was set.
func (o OptNilDate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDate) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDate) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDate) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDate) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDate) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDate) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDateTime returns new OptNilDateTime with value set to v.
func NewOptNilDateTime(v time.Time) OptNilDateTime {
	return OptNilDateTime{
		Value: v,
		Set:   true,
	}
}

// OptNilDateTime is optional nullable time.Time.
type OptNilDateTime struct {
	Value time.Time
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDateTime was set.
func (o OptNilDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDateTime) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilDateTime) SetToNull() {
	o.Set = true
	o.Null = true
	var v time.Time
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDateTime) Get() (v time.Time, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt32 returns new OptNilInt32 with value set to v.
func NewOptNilInt32(v int32) OptNilInt32 {
	return OptNilInt32{
		Value: v,
		Set:   true,
	}
}

// OptNilInt32 is optional nullable int32.
type OptNilInt32 struct {
	Value int32
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt32 was set.
func (o OptNilInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt32) SetTo(v int32) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt32) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt32) SetToNull() {
	o.Set = true
	o.Null = true
	var v int32
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt32) Get() (v int32, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilLogEntryArray returns new OptNilLogEntryArray with value set to v.
func NewOptNilLogEntryArray(v []LogEntry) OptNilLogEntryArray {
	return OptNilLogEntryArray{
		Value: v,
		Set:   true,
	}
}

// OptNilLogEntryArray is optional nullable []LogEntry.
type OptNilLogEntryArray struct {
	Value []LogEntry
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilLogEntryArray was set.
func (o OptNilLogEntryArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilLogEntryArray) Reset() {
	var v []LogEntry
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilLogEntryArray) SetTo(v []LogEntry) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilLogEntryArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilLogEntryArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []LogEntry
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilLogEntryArray) Get() (v []LogEntry, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilLogEntryArray) Or(d []LogEntry) []LogEntry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilMinimalShockerArray returns new OptNilMinimalShockerArray with value set to v.
func NewOptNilMinimalShockerArray(v []MinimalShocker) OptNilMinimalShockerArray {
	return OptNilMinimalShockerArray{
		Value: v,
		Set:   true,
	}
}

// OptNilMinimalShockerArray is optional nullable []MinimalShocker.
type OptNilMinimalShockerArray struct {
	Value []MinimalShocker
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilMinimalShockerArray was set.
func (o OptNilMinimalShockerArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilMinimalShockerArray) Reset() {
	var v []MinimalShocker
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilMinimalShockerArray) SetTo(v []MinimalShocker) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilMinimalShockerArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilMinimalShockerArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []MinimalShocker
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilMinimalShockerArray) Get() (v []MinimalShocker, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilMinimalShockerArray) Or(d []MinimalShocker) []MinimalShocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilOtaItemArray returns new OptNilOtaItemArray with value set to v.
func NewOptNilOtaItemArray(v []OtaItem) OptNilOtaItemArray {
	return OptNilOtaItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilOtaItemArray is optional nullable []OtaItem.
type OptNilOtaItemArray struct {
	Value []OtaItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilOtaItemArray was set.
func (o OptNilOtaItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilOtaItemArray) Reset() {
	var v []OtaItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilOtaItemArray) SetTo(v []OtaItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilOtaItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilOtaItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []OtaItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilOtaItemArray) Get() (v []OtaItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilOtaItemArray) Or(d []OtaItem) []OtaItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilOwnerShockerResponseArrayArray returns new OptNilOwnerShockerResponseArrayArray with value set to v.
func NewOptNilOwnerShockerResponseArrayArray(v [][]OwnerShockerResponse) OptNilOwnerShockerResponseArrayArray {
	return OptNilOwnerShockerResponseArrayArray{
		Value: v,
		Set:   true,
	}
}

// OptNilOwnerShockerResponseArrayArray is optional nullable [][]OwnerShockerResponse.
type OptNilOwnerShockerResponseArrayArray struct {
	Value [][]OwnerShockerResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilOwnerShockerResponseArrayArray was set.
func (o OptNilOwnerShockerResponseArrayArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilOwnerShockerResponseArrayArray) Reset() {
	var v [][]OwnerShockerResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilOwnerShockerResponseArrayArray) SetTo(v [][]OwnerShockerResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilOwnerShockerResponseArrayArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilOwnerShockerResponseArrayArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v [][]OwnerShockerResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilOwnerShockerResponseArrayArray) Get() (v [][]OwnerShockerResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilOwnerShockerResponseArrayArray) Or(d [][]OwnerShockerResponse) [][]OwnerShockerResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPermissionTypeArray returns new OptNilPermissionTypeArray with value set to v.
func NewOptNilPermissionTypeArray(v []PermissionType) OptNilPermissionTypeArray {
	return OptNilPermissionTypeArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPermissionTypeArray is optional nullable []PermissionType.
type OptNilPermissionTypeArray struct {
	Value []PermissionType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPermissionTypeArray was set.
func (o OptNilPermissionTypeArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPermissionTypeArray) Reset() {
	var v []PermissionType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPermissionTypeArray) SetTo(v []PermissionType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPermissionTypeArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilPermissionTypeArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []PermissionType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPermissionTypeArray) Get() (v []PermissionType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPermissionTypeArray) Or(d []PermissionType) []PermissionType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilResponseDeviceArray returns new OptNilResponseDeviceArray with value set to v.
func NewOptNilResponseDeviceArray(v []ResponseDevice) OptNilResponseDeviceArray {
	return OptNilResponseDeviceArray{
		Value: v,
		Set:   true,
	}
}

// OptNilResponseDeviceArray is optional nullable []ResponseDevice.
type OptNilResponseDeviceArray struct {
	Value []ResponseDevice
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilResponseDeviceArray was set.
func (o OptNilResponseDeviceArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilResponseDeviceArray) Reset() {
	var v []ResponseDevice
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilResponseDeviceArray) SetTo(v []ResponseDevice) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilResponseDeviceArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilResponseDeviceArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ResponseDevice
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilResponseDeviceArray) Get() (v []ResponseDevice, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilResponseDeviceArray) Or(d []ResponseDevice) []ResponseDevice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilResponseDeviceWithShockersArray returns new OptNilResponseDeviceWithShockersArray with value set to v.
func NewOptNilResponseDeviceWithShockersArray(v []ResponseDeviceWithShockers) OptNilResponseDeviceWithShockersArray {
	return OptNilResponseDeviceWithShockersArray{
		Value: v,
		Set:   true,
	}
}

// OptNilResponseDeviceWithShockersArray is optional nullable []ResponseDeviceWithShockers.
type OptNilResponseDeviceWithShockersArray struct {
	Value []ResponseDeviceWithShockers
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilResponseDeviceWithShockersArray was set.
func (o OptNilResponseDeviceWithShockersArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilResponseDeviceWithShockersArray) Reset() {
	var v []ResponseDeviceWithShockers
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilResponseDeviceWithShockersArray) SetTo(v []ResponseDeviceWithShockers) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilResponseDeviceWithShockersArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilResponseDeviceWithShockersArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ResponseDeviceWithShockers
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilResponseDeviceWithShockersArray) Get() (v []ResponseDeviceWithShockers, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilResponseDeviceWithShockersArray) Or(d []ResponseDeviceWithShockers) []ResponseDeviceWithShockers {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShareCodeInfoArray returns new OptNilShareCodeInfoArray with value set to v.
func NewOptNilShareCodeInfoArray(v []ShareCodeInfo) OptNilShareCodeInfoArray {
	return OptNilShareCodeInfoArray{
		Value: v,
		Set:   true,
	}
}

// OptNilShareCodeInfoArray is optional nullable []ShareCodeInfo.
type OptNilShareCodeInfoArray struct {
	Value []ShareCodeInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShareCodeInfoArray was set.
func (o OptNilShareCodeInfoArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShareCodeInfoArray) Reset() {
	var v []ShareCodeInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShareCodeInfoArray) SetTo(v []ShareCodeInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShareCodeInfoArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShareCodeInfoArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ShareCodeInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShareCodeInfoArray) Get() (v []ShareCodeInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShareCodeInfoArray) Or(d []ShareCodeInfo) []ShareCodeInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShareInfoArray returns new OptNilShareInfoArray with value set to v.
func NewOptNilShareInfoArray(v []ShareInfo) OptNilShareInfoArray {
	return OptNilShareInfoArray{
		Value: v,
		Set:   true,
	}
}

// OptNilShareInfoArray is optional nullable []ShareInfo.
type OptNilShareInfoArray struct {
	Value []ShareInfo
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShareInfoArray was set.
func (o OptNilShareInfoArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShareInfoArray) Reset() {
	var v []ShareInfo
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShareInfoArray) SetTo(v []ShareInfo) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShareInfoArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShareInfoArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ShareInfo
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShareInfoArray) Get() (v []ShareInfo, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShareInfoArray) Or(d []ShareInfo) []ShareInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShareLinkDeviceArray returns new OptNilShareLinkDeviceArray with value set to v.
func NewOptNilShareLinkDeviceArray(v []ShareLinkDevice) OptNilShareLinkDeviceArray {
	return OptNilShareLinkDeviceArray{
		Value: v,
		Set:   true,
	}
}

// OptNilShareLinkDeviceArray is optional nullable []ShareLinkDevice.
type OptNilShareLinkDeviceArray struct {
	Value []ShareLinkDevice
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShareLinkDeviceArray was set.
func (o OptNilShareLinkDeviceArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShareLinkDeviceArray) Reset() {
	var v []ShareLinkDevice
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShareLinkDeviceArray) SetTo(v []ShareLinkDevice) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShareLinkDeviceArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShareLinkDeviceArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ShareLinkDevice
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShareLinkDeviceArray) Get() (v []ShareLinkDevice, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShareLinkDeviceArray) Or(d []ShareLinkDevice) []ShareLinkDevice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShareLinkResponseArray returns new OptNilShareLinkResponseArray with value set to v.
func NewOptNilShareLinkResponseArray(v []ShareLinkResponse) OptNilShareLinkResponseArray {
	return OptNilShareLinkResponseArray{
		Value: v,
		Set:   true,
	}
}

// OptNilShareLinkResponseArray is optional nullable []ShareLinkResponse.
type OptNilShareLinkResponseArray struct {
	Value []ShareLinkResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShareLinkResponseArray was set.
func (o OptNilShareLinkResponseArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShareLinkResponseArray) Reset() {
	var v []ShareLinkResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShareLinkResponseArray) SetTo(v []ShareLinkResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShareLinkResponseArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShareLinkResponseArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ShareLinkResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShareLinkResponseArray) Get() (v []ShareLinkResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShareLinkResponseArray) Or(d []ShareLinkResponse) []ShareLinkResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShareLinkShockerArray returns new OptNilShareLinkShockerArray with value set to v.
func NewOptNilShareLinkShockerArray(v []ShareLinkShocker) OptNilShareLinkShockerArray {
	return OptNilShareLinkShockerArray{
		Value: v,
		Set:   true,
	}
}

// OptNilShareLinkShockerArray is optional nullable []ShareLinkShocker.
type OptNilShareLinkShockerArray struct {
	Value []ShareLinkShocker
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShareLinkShockerArray was set.
func (o OptNilShareLinkShockerArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShareLinkShockerArray) Reset() {
	var v []ShareLinkShocker
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShareLinkShockerArray) SetTo(v []ShareLinkShocker) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShareLinkShockerArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShareLinkShockerArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ShareLinkShocker
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShareLinkShockerArray) Get() (v []ShareLinkShocker, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShareLinkShockerArray) Or(d []ShareLinkShocker) []ShareLinkShocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSharedDeviceArray returns new OptNilSharedDeviceArray with value set to v.
func NewOptNilSharedDeviceArray(v []SharedDevice) OptNilSharedDeviceArray {
	return OptNilSharedDeviceArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSharedDeviceArray is optional nullable []SharedDevice.
type OptNilSharedDeviceArray struct {
	Value []SharedDevice
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSharedDeviceArray was set.
func (o OptNilSharedDeviceArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSharedDeviceArray) Reset() {
	var v []SharedDevice
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSharedDeviceArray) SetTo(v []SharedDevice) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSharedDeviceArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSharedDeviceArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []SharedDevice
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSharedDeviceArray) Get() (v []SharedDevice, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSharedDeviceArray) Or(d []SharedDevice) []SharedDevice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSharedShockerArray returns new OptNilSharedShockerArray with value set to v.
func NewOptNilSharedShockerArray(v []SharedShocker) OptNilSharedShockerArray {
	return OptNilSharedShockerArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSharedShockerArray is optional nullable []SharedShocker.
type OptNilSharedShockerArray struct {
	Value []SharedShocker
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSharedShockerArray was set.
func (o OptNilSharedShockerArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSharedShockerArray) Reset() {
	var v []SharedShocker
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSharedShockerArray) SetTo(v []SharedShocker) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSharedShockerArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilSharedShockerArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []SharedShocker
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSharedShockerArray) Get() (v []SharedShocker, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSharedShockerArray) Or(d []SharedShocker) []SharedShocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilShockerResponseArray returns new OptNilShockerResponseArray with value set to v.
func NewOptNilShockerResponseArray(v []ShockerResponse) OptNilShockerResponseArray {
	return OptNilShockerResponseArray{
		Value: v,
		Set:   true,
	}
}

// OptNilShockerResponseArray is optional nullable []ShockerResponse.
type OptNilShockerResponseArray struct {
	Value []ShockerResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilShockerResponseArray was set.
func (o OptNilShockerResponseArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilShockerResponseArray) Reset() {
	var v []ShockerResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilShockerResponseArray) SetTo(v []ShockerResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilShockerResponseArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilShockerResponseArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []ShockerResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilShockerResponseArray) Get() (v []ShockerResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilShockerResponseArray) Or(d []ShockerResponse) []ShockerResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilTokenResponseArray returns new OptNilTokenResponseArray with value set to v.
func NewOptNilTokenResponseArray(v []TokenResponse) OptNilTokenResponseArray {
	return OptNilTokenResponseArray{
		Value: v,
		Set:   true,
	}
}

// OptNilTokenResponseArray is optional nullable []TokenResponse.
type OptNilTokenResponseArray struct {
	Value []TokenResponse
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilTokenResponseArray was set.
func (o OptNilTokenResponseArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilTokenResponseArray) Reset() {
	var v []TokenResponse
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilTokenResponseArray) SetTo(v []TokenResponse) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilTokenResponseArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilTokenResponseArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []TokenResponse
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilTokenResponseArray) Get() (v []TokenResponse, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilTokenResponseArray) Or(d []TokenResponse) []TokenResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilURI returns new OptNilURI with value set to v.
func NewOptNilURI(v url.URL) OptNilURI {
	return OptNilURI{
		Value: v,
		Set:   true,
	}
}

// OptNilURI is optional nullable url.URL.
type OptNilURI struct {
	Value url.URL
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilURI was set.
func (o OptNilURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilURI) SetTo(v url.URL) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilURI) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilURI) SetToNull() {
	o.Set = true
	o.Null = true
	var v url.URL
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilURI) Get() (v url.URL, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOtaUpdateStatus returns new OptOtaUpdateStatus with value set to v.
func NewOptOtaUpdateStatus(v OtaUpdateStatus) OptOtaUpdateStatus {
	return OptOtaUpdateStatus{
		Value: v,
		Set:   true,
	}
}

// OptOtaUpdateStatus is optional OtaUpdateStatus.
type OptOtaUpdateStatus struct {
	Value OtaUpdateStatus
	Set   bool
}

// IsSet returns true if OptOtaUpdateStatus was set.
func (o OptOtaUpdateStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOtaUpdateStatus) Reset() {
	var v OtaUpdateStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOtaUpdateStatus) SetTo(v OtaUpdateStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOtaUpdateStatus) Get() (v OtaUpdateStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOtaUpdateStatus) Or(d OtaUpdateStatus) OtaUpdateStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPasswordResetProcessData returns new OptPasswordResetProcessData with value set to v.
func NewOptPasswordResetProcessData(v PasswordResetProcessData) OptPasswordResetProcessData {
	return OptPasswordResetProcessData{
		Value: v,
		Set:   true,
	}
}

// OptPasswordResetProcessData is optional PasswordResetProcessData.
type OptPasswordResetProcessData struct {
	Value PasswordResetProcessData
	Set   bool
}

// IsSet returns true if OptPasswordResetProcessData was set.
func (o OptPasswordResetProcessData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPasswordResetProcessData) Reset() {
	var v PasswordResetProcessData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPasswordResetProcessData) SetTo(v PasswordResetProcessData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPasswordResetProcessData) Get() (v PasswordResetProcessData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPasswordResetProcessData) Or(d PasswordResetProcessData) PasswordResetProcessData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPauseRequest returns new OptPauseRequest with value set to v.
func NewOptPauseRequest(v PauseRequest) OptPauseRequest {
	return OptPauseRequest{
		Value: v,
		Set:   true,
	}
}

// OptPauseRequest is optional PauseRequest.
type OptPauseRequest struct {
	Value PauseRequest
	Set   bool
}

// IsSet returns true if OptPauseRequest was set.
func (o OptPauseRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPauseRequest) Reset() {
	var v PauseRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPauseRequest) SetTo(v PauseRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPauseRequest) Get() (v PauseRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPauseRequest) Or(d PauseRequest) PauseRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPublicShareLinkResponse returns new OptPublicShareLinkResponse with value set to v.
func NewOptPublicShareLinkResponse(v PublicShareLinkResponse) OptPublicShareLinkResponse {
	return OptPublicShareLinkResponse{
		Value: v,
		Set:   true,
	}
}

// OptPublicShareLinkResponse is optional PublicShareLinkResponse.
type OptPublicShareLinkResponse struct {
	Value PublicShareLinkResponse
	Set   bool
}

// IsSet returns true if OptPublicShareLinkResponse was set.
func (o OptPublicShareLinkResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPublicShareLinkResponse) Reset() {
	var v PublicShareLinkResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPublicShareLinkResponse) SetTo(v PublicShareLinkResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPublicShareLinkResponse) Get() (v PublicShareLinkResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPublicShareLinkResponse) Or(d PublicShareLinkResponse) PublicShareLinkResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRankType returns new OptRankType with value set to v.
func NewOptRankType(v RankType) OptRankType {
	return OptRankType{
		Value: v,
		Set:   true,
	}
}

// OptRankType is optional RankType.
type OptRankType struct {
	Value RankType
	Set   bool
}

// IsSet returns true if OptRankType was set.
func (o OptRankType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRankType) Reset() {
	var v RankType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRankType) SetTo(v RankType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRankType) Get() (v RankType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRankType) Or(d RankType) RankType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResetRequest returns new OptResetRequest with value set to v.
func NewOptResetRequest(v ResetRequest) OptResetRequest {
	return OptResetRequest{
		Value: v,
		Set:   true,
	}
}

// OptResetRequest is optional ResetRequest.
type OptResetRequest struct {
	Value ResetRequest
	Set   bool
}

// IsSet returns true if OptResetRequest was set.
func (o OptResetRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResetRequest) Reset() {
	var v ResetRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResetRequest) SetTo(v ResetRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResetRequest) Get() (v ResetRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResetRequest) Or(d ResetRequest) ResetRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptResponseDeviceWithToken returns new OptResponseDeviceWithToken with value set to v.
func NewOptResponseDeviceWithToken(v ResponseDeviceWithToken) OptResponseDeviceWithToken {
	return OptResponseDeviceWithToken{
		Value: v,
		Set:   true,
	}
}

// OptResponseDeviceWithToken is optional ResponseDeviceWithToken.
type OptResponseDeviceWithToken struct {
	Value ResponseDeviceWithToken
	Set   bool
}

// IsSet returns true if OptResponseDeviceWithToken was set.
func (o OptResponseDeviceWithToken) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptResponseDeviceWithToken) Reset() {
	var v ResponseDeviceWithToken
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptResponseDeviceWithToken) SetTo(v ResponseDeviceWithToken) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptResponseDeviceWithToken) Get() (v ResponseDeviceWithToken, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptResponseDeviceWithToken) Or(d ResponseDeviceWithToken) ResponseDeviceWithToken {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRootResponse returns new OptRootResponse with value set to v.
func NewOptRootResponse(v RootResponse) OptRootResponse {
	return OptRootResponse{
		Value: v,
		Set:   true,
	}
}

// OptRootResponse is optional RootResponse.
type OptRootResponse struct {
	Value RootResponse
	Set   bool
}

// IsSet returns true if OptRootResponse was set.
func (o OptRootResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRootResponse) Reset() {
	var v RootResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRootResponse) SetTo(v RootResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRootResponse) Get() (v RootResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRootResponse) Or(d RootResponse) RootResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSelfResponse returns new OptSelfResponse with value set to v.
func NewOptSelfResponse(v SelfResponse) OptSelfResponse {
	return OptSelfResponse{
		Value: v,
		Set:   true,
	}
}

// OptSelfResponse is optional SelfResponse.
type OptSelfResponse struct {
	Value SelfResponse
	Set   bool
}

// IsSet returns true if OptSelfResponse was set.
func (o OptSelfResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSelfResponse) Reset() {
	var v SelfResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSelfResponse) SetTo(v SelfResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSelfResponse) Get() (v SelfResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSelfResponse) Or(d SelfResponse) SelfResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShareLinkCreate returns new OptShareLinkCreate with value set to v.
func NewOptShareLinkCreate(v ShareLinkCreate) OptShareLinkCreate {
	return OptShareLinkCreate{
		Value: v,
		Set:   true,
	}
}

// OptShareLinkCreate is optional ShareLinkCreate.
type OptShareLinkCreate struct {
	Value ShareLinkCreate
	Set   bool
}

// IsSet returns true if OptShareLinkCreate was set.
func (o OptShareLinkCreate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShareLinkCreate) Reset() {
	var v ShareLinkCreate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShareLinkCreate) SetTo(v ShareLinkCreate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShareLinkCreate) Get() (v ShareLinkCreate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShareLinkCreate) Or(d ShareLinkCreate) ShareLinkCreate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShareLinkEditShocker returns new OptShareLinkEditShocker with value set to v.
func NewOptShareLinkEditShocker(v ShareLinkEditShocker) OptShareLinkEditShocker {
	return OptShareLinkEditShocker{
		Value: v,
		Set:   true,
	}
}

// OptShareLinkEditShocker is optional ShareLinkEditShocker.
type OptShareLinkEditShocker struct {
	Value ShareLinkEditShocker
	Set   bool
}

// IsSet returns true if OptShareLinkEditShocker was set.
func (o OptShareLinkEditShocker) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShareLinkEditShocker) Reset() {
	var v ShareLinkEditShocker
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShareLinkEditShocker) SetTo(v ShareLinkEditShocker) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShareLinkEditShocker) Get() (v ShareLinkEditShocker, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShareLinkEditShocker) Or(d ShareLinkEditShocker) ShareLinkEditShocker {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShareLinkResponse returns new OptShareLinkResponse with value set to v.
func NewOptShareLinkResponse(v ShareLinkResponse) OptShareLinkResponse {
	return OptShareLinkResponse{
		Value: v,
		Set:   true,
	}
}

// OptShareLinkResponse is optional ShareLinkResponse.
type OptShareLinkResponse struct {
	Value ShareLinkResponse
	Set   bool
}

// IsSet returns true if OptShareLinkResponse was set.
func (o OptShareLinkResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShareLinkResponse) Reset() {
	var v ShareLinkResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShareLinkResponse) SetTo(v ShareLinkResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShareLinkResponse) Get() (v ShareLinkResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShareLinkResponse) Or(d ShareLinkResponse) ShareLinkResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShockerLimits returns new OptShockerLimits with value set to v.
func NewOptShockerLimits(v ShockerLimits) OptShockerLimits {
	return OptShockerLimits{
		Value: v,
		Set:   true,
	}
}

// OptShockerLimits is optional ShockerLimits.
type OptShockerLimits struct {
	Value ShockerLimits
	Set   bool
}

// IsSet returns true if OptShockerLimits was set.
func (o OptShockerLimits) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShockerLimits) Reset() {
	var v ShockerLimits
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShockerLimits) SetTo(v ShockerLimits) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShockerLimits) Get() (v ShockerLimits, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShockerLimits) Or(d ShockerLimits) ShockerLimits {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShockerModelType returns new OptShockerModelType with value set to v.
func NewOptShockerModelType(v ShockerModelType) OptShockerModelType {
	return OptShockerModelType{
		Value: v,
		Set:   true,
	}
}

// OptShockerModelType is optional ShockerModelType.
type OptShockerModelType struct {
	Value ShockerModelType
	Set   bool
}

// IsSet returns true if OptShockerModelType was set.
func (o OptShockerModelType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShockerModelType) Reset() {
	var v ShockerModelType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShockerModelType) SetTo(v ShockerModelType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShockerModelType) Get() (v ShockerModelType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShockerModelType) Or(d ShockerModelType) ShockerModelType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShockerPermissions returns new OptShockerPermissions with value set to v.
func NewOptShockerPermissions(v ShockerPermissions) OptShockerPermissions {
	return OptShockerPermissions{
		Value: v,
		Set:   true,
	}
}

// OptShockerPermissions is optional ShockerPermissions.
type OptShockerPermissions struct {
	Value ShockerPermissions
	Set   bool
}

// IsSet returns true if OptShockerPermissions was set.
func (o OptShockerPermissions) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShockerPermissions) Reset() {
	var v ShockerPermissions
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShockerPermissions) SetTo(v ShockerPermissions) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShockerPermissions) Get() (v ShockerPermissions, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShockerPermissions) Or(d ShockerPermissions) ShockerPermissions {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptShockerWithDevice returns new OptShockerWithDevice with value set to v.
func NewOptShockerWithDevice(v ShockerWithDevice) OptShockerWithDevice {
	return OptShockerWithDevice{
		Value: v,
		Set:   true,
	}
}

// OptShockerWithDevice is optional ShockerWithDevice.
type OptShockerWithDevice struct {
	Value ShockerWithDevice
	Set   bool
}

// IsSet returns true if OptShockerWithDevice was set.
func (o OptShockerWithDevice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptShockerWithDevice) Reset() {
	var v ShockerWithDevice
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptShockerWithDevice) SetTo(v ShockerWithDevice) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptShockerWithDevice) Get() (v ShockerWithDevice, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptShockerWithDevice) Or(d ShockerWithDevice) ShockerWithDevice {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSignUp returns new OptSignUp with value set to v.
func NewOptSignUp(v SignUp) OptSignUp {
	return OptSignUp{
		Value: v,
		Set:   true,
	}
}

// OptSignUp is optional SignUp.
type OptSignUp struct {
	Value SignUp
	Set   bool
}

// IsSet returns true if OptSignUp was set.
func (o OptSignUp) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignUp) Reset() {
	var v SignUp
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignUp) SetTo(v SignUp) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignUp) Get() (v SignUp, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignUp) Or(d SignUp) SignUp {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSignUpV2 returns new OptSignUpV2 with value set to v.
func NewOptSignUpV2(v SignUpV2) OptSignUpV2 {
	return OptSignUpV2{
		Value: v,
		Set:   true,
	}
}

// OptSignUpV2 is optional SignUpV2.
type OptSignUpV2 struct {
	Value SignUpV2
	Set   bool
}

// IsSet returns true if OptSignUpV2 was set.
func (o OptSignUpV2) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignUpV2) Reset() {
	var v SignUpV2
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignUpV2) SetTo(v SignUpV2) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignUpV2) Get() (v SignUpV2, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignUpV2) Or(d SignUpV2) SignUpV2 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStatsResponse returns new OptStatsResponse with value set to v.
func NewOptStatsResponse(v StatsResponse) OptStatsResponse {
	return OptStatsResponse{
		Value: v,
		Set:   true,
	}
}

// OptStatsResponse is optional StatsResponse.
type OptStatsResponse struct {
	Value StatsResponse
	Set   bool
}

// IsSet returns true if OptStatsResponse was set.
func (o OptStatsResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStatsResponse) Reset() {
	var v StatsResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStatsResponse) SetTo(v StatsResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStatsResponse) Get() (v StatsResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStatsResponse) Or(d StatsResponse) StatsResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTokenResponse returns new OptTokenResponse with value set to v.
func NewOptTokenResponse(v TokenResponse) OptTokenResponse {
	return OptTokenResponse{
		Value: v,
		Set:   true,
	}
}

// OptTokenResponse is optional TokenResponse.
type OptTokenResponse struct {
	Value TokenResponse
	Set   bool
}

// IsSet returns true if OptTokenResponse was set.
func (o OptTokenResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTokenResponse) Reset() {
	var v TokenResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTokenResponse) SetTo(v TokenResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTokenResponse) Get() (v TokenResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTokenResponse) Or(d TokenResponse) TokenResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OtaItem
type OtaItem struct {
	ID        OptInt32           `json:"id"`
	StartedAt OptDateTime        `json:"startedAt"`
	Status    OptOtaUpdateStatus `json:"status"`
	Version   OptNilString       `json:"version"`
	Message   OptNilString       `json:"message"`
}

// GetID returns the value of ID.
func (s *OtaItem) GetID() OptInt32 {
	return s.ID
}

// GetStartedAt returns the value of StartedAt.
func (s *OtaItem) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetStatus returns the value of Status.
func (s *OtaItem) GetStatus() OptOtaUpdateStatus {
	return s.Status
}

// GetVersion returns the value of Version.
func (s *OtaItem) GetVersion() OptNilString {
	return s.Version
}

// GetMessage returns the value of Message.
func (s *OtaItem) GetMessage() OptNilString {
	return s.Message
}

// SetID sets the value of ID.
func (s *OtaItem) SetID(val OptInt32) {
	s.ID = val
}

// SetStartedAt sets the value of StartedAt.
func (s *OtaItem) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetStatus sets the value of Status.
func (s *OtaItem) SetStatus(val OptOtaUpdateStatus) {
	s.Status = val
}

// SetVersion sets the value of Version.
func (s *OtaItem) SetVersion(val OptNilString) {
	s.Version = val
}

// SetMessage sets the value of Message.
func (s *OtaItem) SetMessage(val OptNilString) {
	s.Message = val
}

// Ref: #/components/schemas/OtaItemIReadOnlyCollectionBaseResponse
type OtaItemIReadOnlyCollectionBaseResponse struct {
	Message OptNilString       `json:"message"`
	Data    OptNilOtaItemArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *OtaItemIReadOnlyCollectionBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *OtaItemIReadOnlyCollectionBaseResponse) GetData() OptNilOtaItemArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *OtaItemIReadOnlyCollectionBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *OtaItemIReadOnlyCollectionBaseResponse) SetData(val OptNilOtaItemArray) {
	s.Data = val
}

func (*OtaItemIReadOnlyCollectionBaseResponse) devicesGetOtaUpdateHistoryRes() {}

// Ref: #/components/schemas/OtaUpdateStatus
type OtaUpdateStatus string

const (
	OtaUpdateStatusStarted  OtaUpdateStatus = "Started"
	OtaUpdateStatusRunning  OtaUpdateStatus = "Running"
	OtaUpdateStatusFinished OtaUpdateStatus = "Finished"
	OtaUpdateStatusError    OtaUpdateStatus = "Error"
	OtaUpdateStatusTimeout  OtaUpdateStatus = "Timeout"
)

// AllValues returns all OtaUpdateStatus values.
func (OtaUpdateStatus) AllValues() []OtaUpdateStatus {
	return []OtaUpdateStatus{
		OtaUpdateStatusStarted,
		OtaUpdateStatusRunning,
		OtaUpdateStatusFinished,
		OtaUpdateStatusError,
		OtaUpdateStatusTimeout,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OtaUpdateStatus) MarshalText() ([]byte, error) {
	switch s {
	case OtaUpdateStatusStarted:
		return []byte(s), nil
	case OtaUpdateStatusRunning:
		return []byte(s), nil
	case OtaUpdateStatusFinished:
		return []byte(s), nil
	case OtaUpdateStatusError:
		return []byte(s), nil
	case OtaUpdateStatusTimeout:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OtaUpdateStatus) UnmarshalText(data []byte) error {
	switch OtaUpdateStatus(data) {
	case OtaUpdateStatusStarted:
		*s = OtaUpdateStatusStarted
		return nil
	case OtaUpdateStatusRunning:
		*s = OtaUpdateStatusRunning
		return nil
	case OtaUpdateStatusFinished:
		*s = OtaUpdateStatusFinished
		return nil
	case OtaUpdateStatusError:
		*s = OtaUpdateStatusError
		return nil
	case OtaUpdateStatusTimeout:
		*s = OtaUpdateStatusTimeout
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/OwnerShockerResponse
type OwnerShockerResponse struct {
	ID      OptUUID                 `json:"id"`
	Name    OptNilString            `json:"name"`
	Devices OptNilSharedDeviceArray `json:"devices"`
}

// GetID returns the value of ID.
func (s *OwnerShockerResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *OwnerShockerResponse) GetName() OptNilString {
	return s.Name
}

// GetDevices returns the value of Devices.
func (s *OwnerShockerResponse) GetDevices() OptNilSharedDeviceArray {
	return s.Devices
}

// SetID sets the value of ID.
func (s *OwnerShockerResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *OwnerShockerResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetDevices sets the value of Devices.
func (s *OwnerShockerResponse) SetDevices(val OptNilSharedDeviceArray) {
	s.Devices = val
}

// Ref: #/components/schemas/OwnerShockerResponseIEnumerableIEnumerableBaseResponse
type OwnerShockerResponseIEnumerableIEnumerableBaseResponse struct {
	Message OptNilString                         `json:"message"`
	Data    OptNilOwnerShockerResponseArrayArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *OwnerShockerResponseIEnumerableIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *OwnerShockerResponseIEnumerableIEnumerableBaseResponse) GetData() OptNilOwnerShockerResponseArrayArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *OwnerShockerResponseIEnumerableIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *OwnerShockerResponseIEnumerableIEnumerableBaseResponse) SetData(val OptNilOwnerShockerResponseArrayArray) {
	s.Data = val
}

// Ref: #/components/schemas/PasswordResetProcessData
type PasswordResetProcessData struct {
	Password OptNilString `json:"password"`
}

// GetPassword returns the value of Password.
func (s *PasswordResetProcessData) GetPassword() OptNilString {
	return s.Password
}

// SetPassword sets the value of Password.
func (s *PasswordResetProcessData) SetPassword(val OptNilString) {
	s.Password = val
}

// Ref: #/components/schemas/PauseReasonBaseResponse
type PauseReasonBaseResponse struct {
	Message OptNilString `json:"message"`
	// An integer representing the reason(s) for the shocker being paused, expressed as a bitfield where
	// reasons are OR'd together.
	// Each bit corresponds to:
	// - 1: Shocker
	// - 2: Share
	// - 4: ShareLink
	// For example, a value of 6 (2 | 4) indicates both 'Share' and 'ShareLink' reasons.
	Data OptInt `json:"data"`
}

// GetMessage returns the value of Message.
func (s *PauseReasonBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *PauseReasonBaseResponse) GetData() OptInt {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *PauseReasonBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *PauseReasonBaseResponse) SetData(val OptInt) {
	s.Data = val
}

func (*PauseReasonBaseResponse) shareLinksPauseShockerRes() {}

// Ref: #/components/schemas/PauseRequest
type PauseRequest struct {
	Pause OptBool `json:"pause"`
}

// GetPause returns the value of Pause.
func (s *PauseRequest) GetPause() OptBool {
	return s.Pause
}

// SetPause sets the value of Pause.
func (s *PauseRequest) SetPause(val OptBool) {
	s.Pause = val
}

// Ref: #/components/schemas/PermissionType
type PermissionType string

const (
	PermissionTypeShockersUse PermissionType = "Shockers_Use"
)

// AllValues returns all PermissionType values.
func (PermissionType) AllValues() []PermissionType {
	return []PermissionType{
		PermissionTypeShockersUse,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PermissionType) MarshalText() ([]byte, error) {
	switch s {
	case PermissionTypeShockersUse:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PermissionType) UnmarshalText(data []byte) error {
	switch PermissionType(data) {
	case PermissionTypeShockersUse:
		*s = PermissionTypeShockersUse
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/PublicShareLinkResponse
type PublicShareLinkResponse struct {
	ID        OptUUID                    `json:"id"`
	Name      OptNilString               `json:"name"`
	CreatedOn OptDateTime                `json:"createdOn"`
	ExpiresOn OptNilDateTime             `json:"expiresOn"`
	Author    OptGenericIni              `json:"author"`
	Devices   OptNilShareLinkDeviceArray `json:"devices"`
}

// GetID returns the value of ID.
func (s *PublicShareLinkResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *PublicShareLinkResponse) GetName() OptNilString {
	return s.Name
}

// GetCreatedOn returns the value of CreatedOn.
func (s *PublicShareLinkResponse) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetExpiresOn returns the value of ExpiresOn.
func (s *PublicShareLinkResponse) GetExpiresOn() OptNilDateTime {
	return s.ExpiresOn
}

// GetAuthor returns the value of Author.
func (s *PublicShareLinkResponse) GetAuthor() OptGenericIni {
	return s.Author
}

// GetDevices returns the value of Devices.
func (s *PublicShareLinkResponse) GetDevices() OptNilShareLinkDeviceArray {
	return s.Devices
}

// SetID sets the value of ID.
func (s *PublicShareLinkResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *PublicShareLinkResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *PublicShareLinkResponse) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetExpiresOn sets the value of ExpiresOn.
func (s *PublicShareLinkResponse) SetExpiresOn(val OptNilDateTime) {
	s.ExpiresOn = val
}

// SetAuthor sets the value of Author.
func (s *PublicShareLinkResponse) SetAuthor(val OptGenericIni) {
	s.Author = val
}

// SetDevices sets the value of Devices.
func (s *PublicShareLinkResponse) SetDevices(val OptNilShareLinkDeviceArray) {
	s.Devices = val
}

// Ref: #/components/schemas/PublicShareLinkResponseBaseResponse
type PublicShareLinkResponseBaseResponse struct {
	Message OptNilString               `json:"message"`
	Data    OptPublicShareLinkResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *PublicShareLinkResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *PublicShareLinkResponseBaseResponse) GetData() OptPublicShareLinkResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *PublicShareLinkResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *PublicShareLinkResponseBaseResponse) SetData(val OptPublicShareLinkResponse) {
	s.Data = val
}

func (*PublicShareLinkResponseBaseResponse) publicGetShareLinkRes() {}

// Ref: #/components/schemas/RankType
type RankType string

const (
	RankTypeUser    RankType = "User"
	RankTypeSupport RankType = "Support"
	RankTypeStaff   RankType = "Staff"
	RankTypeAdmin   RankType = "Admin"
	RankTypeSystem  RankType = "System"
)

// AllValues returns all RankType values.
func (RankType) AllValues() []RankType {
	return []RankType{
		RankTypeUser,
		RankTypeSupport,
		RankTypeStaff,
		RankTypeAdmin,
		RankTypeSystem,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RankType) MarshalText() ([]byte, error) {
	switch s {
	case RankTypeUser:
		return []byte(s), nil
	case RankTypeSupport:
		return []byte(s), nil
	case RankTypeStaff:
		return []byte(s), nil
	case RankTypeAdmin:
		return []byte(s), nil
	case RankTypeSystem:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RankType) UnmarshalText(data []byte) error {
	switch RankType(data) {
	case RankTypeUser:
		*s = RankTypeUser
		return nil
	case RankTypeSupport:
		*s = RankTypeSupport
		return nil
	case RankTypeStaff:
		*s = RankTypeStaff
		return nil
	case RankTypeAdmin:
		*s = RankTypeAdmin
		return nil
	case RankTypeSystem:
		*s = RankTypeSystem
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ResetRequest
type ResetRequest struct {
	Email OptNilString `json:"email"`
}

// GetEmail returns the value of Email.
func (s *ResetRequest) GetEmail() OptNilString {
	return s.Email
}

// SetEmail sets the value of Email.
func (s *ResetRequest) SetEmail(val OptNilString) {
	s.Email = val
}

// Ref: #/components/schemas/ResponseDevice
type ResponseDevice struct {
	ID        OptUUID      `json:"id"`
	Name      OptNilString `json:"name"`
	CreatedOn OptDateTime  `json:"createdOn"`
}

// GetID returns the value of ID.
func (s *ResponseDevice) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ResponseDevice) GetName() OptNilString {
	return s.Name
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ResponseDevice) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// SetID sets the value of ID.
func (s *ResponseDevice) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ResponseDevice) SetName(val OptNilString) {
	s.Name = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ResponseDevice) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// Ref: #/components/schemas/ResponseDeviceIEnumerableBaseResponse
type ResponseDeviceIEnumerableBaseResponse struct {
	Message OptNilString              `json:"message"`
	Data    OptNilResponseDeviceArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ResponseDeviceIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ResponseDeviceIEnumerableBaseResponse) GetData() OptNilResponseDeviceArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ResponseDeviceIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ResponseDeviceIEnumerableBaseResponse) SetData(val OptNilResponseDeviceArray) {
	s.Data = val
}

// Ref: #/components/schemas/ResponseDeviceWithShockers
type ResponseDeviceWithShockers struct {
	ID        OptUUID                    `json:"id"`
	Name      OptNilString               `json:"name"`
	CreatedOn OptDateTime                `json:"createdOn"`
	Shockers  OptNilShockerResponseArray `json:"shockers"`
}

// GetID returns the value of ID.
func (s *ResponseDeviceWithShockers) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ResponseDeviceWithShockers) GetName() OptNilString {
	return s.Name
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ResponseDeviceWithShockers) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetShockers returns the value of Shockers.
func (s *ResponseDeviceWithShockers) GetShockers() OptNilShockerResponseArray {
	return s.Shockers
}

// SetID sets the value of ID.
func (s *ResponseDeviceWithShockers) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ResponseDeviceWithShockers) SetName(val OptNilString) {
	s.Name = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ResponseDeviceWithShockers) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetShockers sets the value of Shockers.
func (s *ResponseDeviceWithShockers) SetShockers(val OptNilShockerResponseArray) {
	s.Shockers = val
}

// Ref: #/components/schemas/ResponseDeviceWithShockersIEnumerableBaseResponse
type ResponseDeviceWithShockersIEnumerableBaseResponse struct {
	Message OptNilString                          `json:"message"`
	Data    OptNilResponseDeviceWithShockersArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ResponseDeviceWithShockersIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ResponseDeviceWithShockersIEnumerableBaseResponse) GetData() OptNilResponseDeviceWithShockersArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ResponseDeviceWithShockersIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ResponseDeviceWithShockersIEnumerableBaseResponse) SetData(val OptNilResponseDeviceWithShockersArray) {
	s.Data = val
}

// Ref: #/components/schemas/ResponseDeviceWithToken
type ResponseDeviceWithToken struct {
	ID        OptUUID      `json:"id"`
	Name      OptNilString `json:"name"`
	CreatedOn OptDateTime  `json:"createdOn"`
	Token     OptNilString `json:"token"`
}

// GetID returns the value of ID.
func (s *ResponseDeviceWithToken) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ResponseDeviceWithToken) GetName() OptNilString {
	return s.Name
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ResponseDeviceWithToken) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetToken returns the value of Token.
func (s *ResponseDeviceWithToken) GetToken() OptNilString {
	return s.Token
}

// SetID sets the value of ID.
func (s *ResponseDeviceWithToken) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ResponseDeviceWithToken) SetName(val OptNilString) {
	s.Name = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ResponseDeviceWithToken) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetToken sets the value of Token.
func (s *ResponseDeviceWithToken) SetToken(val OptNilString) {
	s.Token = val
}

// Ref: #/components/schemas/ResponseDeviceWithTokenBaseResponse
type ResponseDeviceWithTokenBaseResponse struct {
	Message OptNilString               `json:"message"`
	Data    OptResponseDeviceWithToken `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ResponseDeviceWithTokenBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ResponseDeviceWithTokenBaseResponse) GetData() OptResponseDeviceWithToken {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ResponseDeviceWithTokenBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ResponseDeviceWithTokenBaseResponse) SetData(val OptResponseDeviceWithToken) {
	s.Data = val
}

func (*ResponseDeviceWithTokenBaseResponse) devicesGetDeviceByIdRes() {}

// Ref: #/components/schemas/RootResponse
type RootResponse struct {
	Version     OptNilString `json:"version"`
	Commit      OptNilString `json:"commit"`
	CurrentTime OptDateTime  `json:"currentTime"`
}

// GetVersion returns the value of Version.
func (s *RootResponse) GetVersion() OptNilString {
	return s.Version
}

// GetCommit returns the value of Commit.
func (s *RootResponse) GetCommit() OptNilString {
	return s.Commit
}

// GetCurrentTime returns the value of CurrentTime.
func (s *RootResponse) GetCurrentTime() OptDateTime {
	return s.CurrentTime
}

// SetVersion sets the value of Version.
func (s *RootResponse) SetVersion(val OptNilString) {
	s.Version = val
}

// SetCommit sets the value of Commit.
func (s *RootResponse) SetCommit(val OptNilString) {
	s.Commit = val
}

// SetCurrentTime sets the value of CurrentTime.
func (s *RootResponse) SetCurrentTime(val OptDateTime) {
	s.CurrentTime = val
}

// Ref: #/components/schemas/RootResponseBaseResponse
type RootResponseBaseResponse struct {
	Message OptNilString    `json:"message"`
	Data    OptRootResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *RootResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *RootResponseBaseResponse) GetData() OptRootResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *RootResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *RootResponseBaseResponse) SetData(val OptRootResponse) {
	s.Data = val
}

// Ref: #/components/schemas/SelfResponse
type SelfResponse struct {
	ID    OptUUID      `json:"id"`
	Name  OptNilString `json:"name"`
	Email OptNilString `json:"email"`
	Image OptNilURI    `json:"image"`
	Rank  OptRankType  `json:"rank"`
}

// GetID returns the value of ID.
func (s *SelfResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *SelfResponse) GetName() OptNilString {
	return s.Name
}

// GetEmail returns the value of Email.
func (s *SelfResponse) GetEmail() OptNilString {
	return s.Email
}

// GetImage returns the value of Image.
func (s *SelfResponse) GetImage() OptNilURI {
	return s.Image
}

// GetRank returns the value of Rank.
func (s *SelfResponse) GetRank() OptRankType {
	return s.Rank
}

// SetID sets the value of ID.
func (s *SelfResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SelfResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetEmail sets the value of Email.
func (s *SelfResponse) SetEmail(val OptNilString) {
	s.Email = val
}

// SetImage sets the value of Image.
func (s *SelfResponse) SetImage(val OptNilURI) {
	s.Image = val
}

// SetRank sets the value of Rank.
func (s *SelfResponse) SetRank(val OptRankType) {
	s.Rank = val
}

// Ref: #/components/schemas/SelfResponseBaseResponse
type SelfResponseBaseResponse struct {
	Message OptNilString    `json:"message"`
	Data    OptSelfResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *SelfResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *SelfResponseBaseResponse) GetData() OptSelfResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *SelfResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *SelfResponseBaseResponse) SetData(val OptSelfResponse) {
	s.Data = val
}

// Ref: #/components/schemas/ShareCodeInfo
type ShareCodeInfo struct {
	ID        OptUUID     `json:"id"`
	CreatedOn OptDateTime `json:"createdOn"`
}

// GetID returns the value of ID.
func (s *ShareCodeInfo) GetID() OptUUID {
	return s.ID
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ShareCodeInfo) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// SetID sets the value of ID.
func (s *ShareCodeInfo) SetID(val OptUUID) {
	s.ID = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ShareCodeInfo) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// Ref: #/components/schemas/ShareCodeInfoIEnumerableBaseResponse
type ShareCodeInfoIEnumerableBaseResponse struct {
	Message OptNilString             `json:"message"`
	Data    OptNilShareCodeInfoArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ShareCodeInfoIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ShareCodeInfoIEnumerableBaseResponse) GetData() OptNilShareCodeInfoArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ShareCodeInfoIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ShareCodeInfoIEnumerableBaseResponse) SetData(val OptNilShareCodeInfoArray) {
	s.Data = val
}

func (*ShareCodeInfoIEnumerableBaseResponse) shockerShockerShareCodeListRes() {}

// Ref: #/components/schemas/ShareInfo
type ShareInfo struct {
	SharedWith  OptGenericIni         `json:"sharedWith"`
	CreatedOn   OptDateTime           `json:"createdOn"`
	Permissions OptShockerPermissions `json:"permissions"`
	Limits      OptShockerLimits      `json:"limits"`
	Paused      OptBool               `json:"paused"`
}

// GetSharedWith returns the value of SharedWith.
func (s *ShareInfo) GetSharedWith() OptGenericIni {
	return s.SharedWith
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ShareInfo) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetPermissions returns the value of Permissions.
func (s *ShareInfo) GetPermissions() OptShockerPermissions {
	return s.Permissions
}

// GetLimits returns the value of Limits.
func (s *ShareInfo) GetLimits() OptShockerLimits {
	return s.Limits
}

// GetPaused returns the value of Paused.
func (s *ShareInfo) GetPaused() OptBool {
	return s.Paused
}

// SetSharedWith sets the value of SharedWith.
func (s *ShareInfo) SetSharedWith(val OptGenericIni) {
	s.SharedWith = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ShareInfo) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetPermissions sets the value of Permissions.
func (s *ShareInfo) SetPermissions(val OptShockerPermissions) {
	s.Permissions = val
}

// SetLimits sets the value of Limits.
func (s *ShareInfo) SetLimits(val OptShockerLimits) {
	s.Limits = val
}

// SetPaused sets the value of Paused.
func (s *ShareInfo) SetPaused(val OptBool) {
	s.Paused = val
}

// Ref: #/components/schemas/ShareInfoIEnumerableBaseResponse
type ShareInfoIEnumerableBaseResponse struct {
	Message OptNilString         `json:"message"`
	Data    OptNilShareInfoArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ShareInfoIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ShareInfoIEnumerableBaseResponse) GetData() OptNilShareInfoArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ShareInfoIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ShareInfoIEnumerableBaseResponse) SetData(val OptNilShareInfoArray) {
	s.Data = val
}

func (*ShareInfoIEnumerableBaseResponse) shockerGetShockerSharesRes() {}

// Ref: #/components/schemas/ShareLinkCreate
type ShareLinkCreate struct {
	Name      OptNilString   `json:"name"`
	ExpiresOn OptNilDateTime `json:"expiresOn"`
}

// GetName returns the value of Name.
func (s *ShareLinkCreate) GetName() OptNilString {
	return s.Name
}

// GetExpiresOn returns the value of ExpiresOn.
func (s *ShareLinkCreate) GetExpiresOn() OptNilDateTime {
	return s.ExpiresOn
}

// SetName sets the value of Name.
func (s *ShareLinkCreate) SetName(val OptNilString) {
	s.Name = val
}

// SetExpiresOn sets the value of ExpiresOn.
func (s *ShareLinkCreate) SetExpiresOn(val OptNilDateTime) {
	s.ExpiresOn = val
}

// Ref: #/components/schemas/ShareLinkDevice
type ShareLinkDevice struct {
	ID       OptUUID                     `json:"id"`
	Name     OptNilString                `json:"name"`
	Shockers OptNilShareLinkShockerArray `json:"shockers"`
}

// GetID returns the value of ID.
func (s *ShareLinkDevice) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ShareLinkDevice) GetName() OptNilString {
	return s.Name
}

// GetShockers returns the value of Shockers.
func (s *ShareLinkDevice) GetShockers() OptNilShareLinkShockerArray {
	return s.Shockers
}

// SetID sets the value of ID.
func (s *ShareLinkDevice) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ShareLinkDevice) SetName(val OptNilString) {
	s.Name = val
}

// SetShockers sets the value of Shockers.
func (s *ShareLinkDevice) SetShockers(val OptNilShareLinkShockerArray) {
	s.Shockers = val
}

// Ref: #/components/schemas/ShareLinkEditShocker
type ShareLinkEditShocker struct {
	Permissions OptShockerPermissions `json:"permissions"`
	Limits      OptShockerLimits      `json:"limits"`
	Cooldown    OptNilInt32           `json:"cooldown"`
}

// GetPermissions returns the value of Permissions.
func (s *ShareLinkEditShocker) GetPermissions() OptShockerPermissions {
	return s.Permissions
}

// GetLimits returns the value of Limits.
func (s *ShareLinkEditShocker) GetLimits() OptShockerLimits {
	return s.Limits
}

// GetCooldown returns the value of Cooldown.
func (s *ShareLinkEditShocker) GetCooldown() OptNilInt32 {
	return s.Cooldown
}

// SetPermissions sets the value of Permissions.
func (s *ShareLinkEditShocker) SetPermissions(val OptShockerPermissions) {
	s.Permissions = val
}

// SetLimits sets the value of Limits.
func (s *ShareLinkEditShocker) SetLimits(val OptShockerLimits) {
	s.Limits = val
}

// SetCooldown sets the value of Cooldown.
func (s *ShareLinkEditShocker) SetCooldown(val OptNilInt32) {
	s.Cooldown = val
}

// Ref: #/components/schemas/ShareLinkResponse
type ShareLinkResponse struct {
	ID        OptUUID        `json:"id"`
	Name      OptNilString   `json:"name"`
	CreatedOn OptDateTime    `json:"createdOn"`
	ExpiresOn OptNilDateTime `json:"expiresOn"`
}

// GetID returns the value of ID.
func (s *ShareLinkResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ShareLinkResponse) GetName() OptNilString {
	return s.Name
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ShareLinkResponse) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetExpiresOn returns the value of ExpiresOn.
func (s *ShareLinkResponse) GetExpiresOn() OptNilDateTime {
	return s.ExpiresOn
}

// SetID sets the value of ID.
func (s *ShareLinkResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ShareLinkResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ShareLinkResponse) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetExpiresOn sets the value of ExpiresOn.
func (s *ShareLinkResponse) SetExpiresOn(val OptNilDateTime) {
	s.ExpiresOn = val
}

// Ref: #/components/schemas/ShareLinkResponseBaseResponse
type ShareLinkResponseBaseResponse struct {
	Message OptNilString         `json:"message"`
	Data    OptShareLinkResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ShareLinkResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ShareLinkResponseBaseResponse) GetData() OptShareLinkResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ShareLinkResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ShareLinkResponseBaseResponse) SetData(val OptShareLinkResponse) {
	s.Data = val
}

func (*ShareLinkResponseBaseResponse) shareLinksEditShockerRes() {}

// Ref: #/components/schemas/ShareLinkResponseIEnumerableBaseResponse
type ShareLinkResponseIEnumerableBaseResponse struct {
	Message OptNilString                 `json:"message"`
	Data    OptNilShareLinkResponseArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ShareLinkResponseIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ShareLinkResponseIEnumerableBaseResponse) GetData() OptNilShareLinkResponseArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ShareLinkResponseIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ShareLinkResponseIEnumerableBaseResponse) SetData(val OptNilShareLinkResponseArray) {
	s.Data = val
}

// Ref: #/components/schemas/ShareLinkShocker
type ShareLinkShocker struct {
	ID          OptUUID               `json:"id"`
	Name        OptNilString          `json:"name"`
	Permissions OptShockerPermissions `json:"permissions"`
	Limits      OptShockerLimits      `json:"limits"`
	// An integer representing the reason(s) for the shocker being paused, expressed as a bitfield where
	// reasons are OR'd together.
	// Each bit corresponds to:
	// - 1: Shocker
	// - 2: Share
	// - 4: ShareLink
	// For example, a value of 6 (2 | 4) indicates both 'Share' and 'ShareLink' reasons.
	Paused OptInt `json:"paused"`
}

// GetID returns the value of ID.
func (s *ShareLinkShocker) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *ShareLinkShocker) GetName() OptNilString {
	return s.Name
}

// GetPermissions returns the value of Permissions.
func (s *ShareLinkShocker) GetPermissions() OptShockerPermissions {
	return s.Permissions
}

// GetLimits returns the value of Limits.
func (s *ShareLinkShocker) GetLimits() OptShockerLimits {
	return s.Limits
}

// GetPaused returns the value of Paused.
func (s *ShareLinkShocker) GetPaused() OptInt {
	return s.Paused
}

// SetID sets the value of ID.
func (s *ShareLinkShocker) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *ShareLinkShocker) SetName(val OptNilString) {
	s.Name = val
}

// SetPermissions sets the value of Permissions.
func (s *ShareLinkShocker) SetPermissions(val OptShockerPermissions) {
	s.Permissions = val
}

// SetLimits sets the value of Limits.
func (s *ShareLinkShocker) SetLimits(val OptShockerLimits) {
	s.Limits = val
}

// SetPaused sets the value of Paused.
func (s *ShareLinkShocker) SetPaused(val OptInt) {
	s.Paused = val
}

type ShareLinksAddShockerConflict OpenShockProblem

func (*ShareLinksAddShockerConflict) shareLinksAddShockerRes() {}

type ShareLinksAddShockerNotFound OpenShockProblem

func (*ShareLinksAddShockerNotFound) shareLinksAddShockerRes() {}

// ShareLinksEditShockerBadRequest is response for ShareLinksEditShocker operation.
type ShareLinksEditShockerBadRequest struct{}

func (*ShareLinksEditShockerBadRequest) shareLinksEditShockerRes() {}

// ShareLinksPauseShockerBadRequest is response for ShareLinksPauseShocker operation.
type ShareLinksPauseShockerBadRequest struct{}

func (*ShareLinksPauseShockerBadRequest) shareLinksPauseShockerRes() {}

// ShareLinksRemoveShockerBadRequest is response for ShareLinksRemoveShocker operation.
type ShareLinksRemoveShockerBadRequest struct{}

func (*ShareLinksRemoveShockerBadRequest) shareLinksRemoveShockerRes() {}

// Ref: #/components/schemas/SharedDevice
type SharedDevice struct {
	ID       OptUUID                  `json:"id"`
	Name     OptNilString             `json:"name"`
	Shockers OptNilSharedShockerArray `json:"shockers"`
}

// GetID returns the value of ID.
func (s *SharedDevice) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *SharedDevice) GetName() OptNilString {
	return s.Name
}

// GetShockers returns the value of Shockers.
func (s *SharedDevice) GetShockers() OptNilSharedShockerArray {
	return s.Shockers
}

// SetID sets the value of ID.
func (s *SharedDevice) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SharedDevice) SetName(val OptNilString) {
	s.Name = val
}

// SetShockers sets the value of Shockers.
func (s *SharedDevice) SetShockers(val OptNilSharedShockerArray) {
	s.Shockers = val
}

// Ref: #/components/schemas/SharedShocker
type SharedShocker struct {
	ID          OptUUID               `json:"id"`
	Name        OptNilString          `json:"name"`
	IsPaused    OptBool               `json:"isPaused"`
	Permissions OptShockerPermissions `json:"permissions"`
	Limits      OptShockerLimits      `json:"limits"`
}

// GetID returns the value of ID.
func (s *SharedShocker) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *SharedShocker) GetName() OptNilString {
	return s.Name
}

// GetIsPaused returns the value of IsPaused.
func (s *SharedShocker) GetIsPaused() OptBool {
	return s.IsPaused
}

// GetPermissions returns the value of Permissions.
func (s *SharedShocker) GetPermissions() OptShockerPermissions {
	return s.Permissions
}

// GetLimits returns the value of Limits.
func (s *SharedShocker) GetLimits() OptShockerLimits {
	return s.Limits
}

// SetID sets the value of ID.
func (s *SharedShocker) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *SharedShocker) SetName(val OptNilString) {
	s.Name = val
}

// SetIsPaused sets the value of IsPaused.
func (s *SharedShocker) SetIsPaused(val OptBool) {
	s.IsPaused = val
}

// SetPermissions sets the value of Permissions.
func (s *SharedShocker) SetPermissions(val OptShockerPermissions) {
	s.Permissions = val
}

// SetLimits sets the value of Limits.
func (s *SharedShocker) SetLimits(val OptShockerLimits) {
	s.Limits = val
}

type SharesLinkShareCodeBadRequest OpenShockProblem

func (*SharesLinkShareCodeBadRequest) sharesLinkShareCodeRes() {}

// SharesLinkShareCodeInternalServerError is response for SharesLinkShareCode operation.
type SharesLinkShareCodeInternalServerError struct{}

func (*SharesLinkShareCodeInternalServerError) sharesLinkShareCodeRes() {}

type SharesLinkShareCodeNotFound OpenShockProblem

func (*SharesLinkShareCodeNotFound) sharesLinkShareCodeRes() {}

// Ref: #/components/schemas/ShockerLimits
type ShockerLimits struct {
	Intensity OptNilInt32 `json:"intensity"`
	Duration  OptNilInt32 `json:"duration"`
}

// GetIntensity returns the value of Intensity.
func (s *ShockerLimits) GetIntensity() OptNilInt32 {
	return s.Intensity
}

// GetDuration returns the value of Duration.
func (s *ShockerLimits) GetDuration() OptNilInt32 {
	return s.Duration
}

// SetIntensity sets the value of Intensity.
func (s *ShockerLimits) SetIntensity(val OptNilInt32) {
	s.Intensity = val
}

// SetDuration sets the value of Duration.
func (s *ShockerLimits) SetDuration(val OptNilInt32) {
	s.Duration = val
}

// Ref: #/components/schemas/ShockerModelType
type ShockerModelType string

const (
	ShockerModelTypeCaiXianlin     ShockerModelType = "CaiXianlin"
	ShockerModelTypePetTrainer     ShockerModelType = "PetTrainer"
	ShockerModelTypePetrainer998DR ShockerModelType = "Petrainer998DR"
)

// AllValues returns all ShockerModelType values.
func (ShockerModelType) AllValues() []ShockerModelType {
	return []ShockerModelType{
		ShockerModelTypeCaiXianlin,
		ShockerModelTypePetTrainer,
		ShockerModelTypePetrainer998DR,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ShockerModelType) MarshalText() ([]byte, error) {
	switch s {
	case ShockerModelTypeCaiXianlin:
		return []byte(s), nil
	case ShockerModelTypePetTrainer:
		return []byte(s), nil
	case ShockerModelTypePetrainer998DR:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ShockerModelType) UnmarshalText(data []byte) error {
	switch ShockerModelType(data) {
	case ShockerModelTypeCaiXianlin:
		*s = ShockerModelTypeCaiXianlin
		return nil
	case ShockerModelTypePetTrainer:
		*s = ShockerModelTypePetTrainer
		return nil
	case ShockerModelTypePetrainer998DR:
		*s = ShockerModelTypePetrainer998DR
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ShockerPermissions
type ShockerPermissions struct {
	Vibrate OptBool `json:"vibrate"`
	Sound   OptBool `json:"sound"`
	Shock   OptBool `json:"shock"`
	Live    OptBool `json:"live"`
}

// GetVibrate returns the value of Vibrate.
func (s *ShockerPermissions) GetVibrate() OptBool {
	return s.Vibrate
}

// GetSound returns the value of Sound.
func (s *ShockerPermissions) GetSound() OptBool {
	return s.Sound
}

// GetShock returns the value of Shock.
func (s *ShockerPermissions) GetShock() OptBool {
	return s.Shock
}

// GetLive returns the value of Live.
func (s *ShockerPermissions) GetLive() OptBool {
	return s.Live
}

// SetVibrate sets the value of Vibrate.
func (s *ShockerPermissions) SetVibrate(val OptBool) {
	s.Vibrate = val
}

// SetSound sets the value of Sound.
func (s *ShockerPermissions) SetSound(val OptBool) {
	s.Sound = val
}

// SetShock sets the value of Shock.
func (s *ShockerPermissions) SetShock(val OptBool) {
	s.Shock = val
}

// SetLive sets the value of Live.
func (s *ShockerPermissions) SetLive(val OptBool) {
	s.Live = val
}

type ShockerRegisterShockerBadRequest OpenShockProblem

func (*ShockerRegisterShockerBadRequest) shockerRegisterShockerRes() {}

type ShockerRegisterShockerNotFound OpenShockProblem

func (*ShockerRegisterShockerNotFound) shockerRegisterShockerRes() {}

// Ref: #/components/schemas/ShockerResponse
type ShockerResponse struct {
	ID        OptUUID             `json:"id"`
	RfId      OptInt32            `json:"rfId"`
	Model     OptShockerModelType `json:"model"`
	Name      OptNilString        `json:"name"`
	IsPaused  OptBool             `json:"isPaused"`
	CreatedOn OptDateTime         `json:"createdOn"`
}

// GetID returns the value of ID.
func (s *ShockerResponse) GetID() OptUUID {
	return s.ID
}

// GetRfId returns the value of RfId.
func (s *ShockerResponse) GetRfId() OptInt32 {
	return s.RfId
}

// GetModel returns the value of Model.
func (s *ShockerResponse) GetModel() OptShockerModelType {
	return s.Model
}

// GetName returns the value of Name.
func (s *ShockerResponse) GetName() OptNilString {
	return s.Name
}

// GetIsPaused returns the value of IsPaused.
func (s *ShockerResponse) GetIsPaused() OptBool {
	return s.IsPaused
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ShockerResponse) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// SetID sets the value of ID.
func (s *ShockerResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetRfId sets the value of RfId.
func (s *ShockerResponse) SetRfId(val OptInt32) {
	s.RfId = val
}

// SetModel sets the value of Model.
func (s *ShockerResponse) SetModel(val OptShockerModelType) {
	s.Model = val
}

// SetName sets the value of Name.
func (s *ShockerResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetIsPaused sets the value of IsPaused.
func (s *ShockerResponse) SetIsPaused(val OptBool) {
	s.IsPaused = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ShockerResponse) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// Ref: #/components/schemas/ShockerResponseIEnumerableBaseResponse
type ShockerResponseIEnumerableBaseResponse struct {
	Message OptNilString               `json:"message"`
	Data    OptNilShockerResponseArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ShockerResponseIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ShockerResponseIEnumerableBaseResponse) GetData() OptNilShockerResponseArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ShockerResponseIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ShockerResponseIEnumerableBaseResponse) SetData(val OptNilShockerResponseArray) {
	s.Data = val
}

func (*ShockerResponseIEnumerableBaseResponse) devicesGetShockersRes() {}

type ShockerSendControlDEPRECATEDForbidden OpenShockProblem

func (*ShockerSendControlDEPRECATEDForbidden) shockerSendControlDEPRECATEDRes() {}

type ShockerSendControlDEPRECATEDNotFound OpenShockProblem

func (*ShockerSendControlDEPRECATEDNotFound) shockerSendControlDEPRECATEDRes() {}

type ShockerSendControlDEPRECATEDPreconditionFailed OpenShockProblem

func (*ShockerSendControlDEPRECATEDPreconditionFailed) shockerSendControlDEPRECATEDRes() {}

type ShockerSendControlForbidden OpenShockProblem

func (*ShockerSendControlForbidden) shockerSendControlRes() {}

type ShockerSendControlNotFound OpenShockProblem

func (*ShockerSendControlNotFound) shockerSendControlRes() {}

type ShockerSendControlPreconditionFailed OpenShockProblem

func (*ShockerSendControlPreconditionFailed) shockerSendControlRes() {}

// Ref: #/components/schemas/ShockerWithDevice
type ShockerWithDevice struct {
	ID        OptUUID             `json:"id"`
	RfId      OptInt32            `json:"rfId"`
	Model     OptShockerModelType `json:"model"`
	Name      OptNilString        `json:"name"`
	IsPaused  OptBool             `json:"isPaused"`
	CreatedOn OptDateTime         `json:"createdOn"`
	Device    OptUUID             `json:"device"`
}

// GetID returns the value of ID.
func (s *ShockerWithDevice) GetID() OptUUID {
	return s.ID
}

// GetRfId returns the value of RfId.
func (s *ShockerWithDevice) GetRfId() OptInt32 {
	return s.RfId
}

// GetModel returns the value of Model.
func (s *ShockerWithDevice) GetModel() OptShockerModelType {
	return s.Model
}

// GetName returns the value of Name.
func (s *ShockerWithDevice) GetName() OptNilString {
	return s.Name
}

// GetIsPaused returns the value of IsPaused.
func (s *ShockerWithDevice) GetIsPaused() OptBool {
	return s.IsPaused
}

// GetCreatedOn returns the value of CreatedOn.
func (s *ShockerWithDevice) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetDevice returns the value of Device.
func (s *ShockerWithDevice) GetDevice() OptUUID {
	return s.Device
}

// SetID sets the value of ID.
func (s *ShockerWithDevice) SetID(val OptUUID) {
	s.ID = val
}

// SetRfId sets the value of RfId.
func (s *ShockerWithDevice) SetRfId(val OptInt32) {
	s.RfId = val
}

// SetModel sets the value of Model.
func (s *ShockerWithDevice) SetModel(val OptShockerModelType) {
	s.Model = val
}

// SetName sets the value of Name.
func (s *ShockerWithDevice) SetName(val OptNilString) {
	s.Name = val
}

// SetIsPaused sets the value of IsPaused.
func (s *ShockerWithDevice) SetIsPaused(val OptBool) {
	s.IsPaused = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *ShockerWithDevice) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetDevice sets the value of Device.
func (s *ShockerWithDevice) SetDevice(val OptUUID) {
	s.Device = val
}

// Ref: #/components/schemas/ShockerWithDeviceBaseResponse
type ShockerWithDeviceBaseResponse struct {
	Message OptNilString         `json:"message"`
	Data    OptShockerWithDevice `json:"data"`
}

// GetMessage returns the value of Message.
func (s *ShockerWithDeviceBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *ShockerWithDeviceBaseResponse) GetData() OptShockerWithDevice {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *ShockerWithDeviceBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *ShockerWithDeviceBaseResponse) SetData(val OptShockerWithDevice) {
	s.Data = val
}

func (*ShockerWithDeviceBaseResponse) shockerGetShockerByIdRes() {}

// Ref: #/components/schemas/SignUp
type SignUp struct {
	Username OptNilString `json:"username"`
	Password OptNilString `json:"password"`
	Email    OptNilString `json:"email"`
}

// GetUsername returns the value of Username.
func (s *SignUp) GetUsername() OptNilString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SignUp) GetPassword() OptNilString {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *SignUp) GetEmail() OptNilString {
	return s.Email
}

// SetUsername sets the value of Username.
func (s *SignUp) SetUsername(val OptNilString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SignUp) SetPassword(val OptNilString) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *SignUp) SetEmail(val OptNilString) {
	s.Email = val
}

// Ref: #/components/schemas/SignUpV2
type SignUpV2 struct {
	Username          OptNilString `json:"username"`
	Password          OptNilString `json:"password"`
	Email             OptNilString `json:"email"`
	TurnstileResponse string       `json:"turnstileResponse"`
}

// GetUsername returns the value of Username.
func (s *SignUpV2) GetUsername() OptNilString {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *SignUpV2) GetPassword() OptNilString {
	return s.Password
}

// GetEmail returns the value of Email.
func (s *SignUpV2) GetEmail() OptNilString {
	return s.Email
}

// GetTurnstileResponse returns the value of TurnstileResponse.
func (s *SignUpV2) GetTurnstileResponse() string {
	return s.TurnstileResponse
}

// SetUsername sets the value of Username.
func (s *SignUpV2) SetUsername(val OptNilString) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *SignUpV2) SetPassword(val OptNilString) {
	s.Password = val
}

// SetEmail sets the value of Email.
func (s *SignUpV2) SetEmail(val OptNilString) {
	s.Email = val
}

// SetTurnstileResponse sets the value of TurnstileResponse.
func (s *SignUpV2) SetTurnstileResponse(val string) {
	s.TurnstileResponse = val
}

// Ref: #/components/schemas/StatsResponse
type StatsResponse struct {
	DevicesOnline OptInt32 `json:"devicesOnline"`
}

// GetDevicesOnline returns the value of DevicesOnline.
func (s *StatsResponse) GetDevicesOnline() OptInt32 {
	return s.DevicesOnline
}

// SetDevicesOnline sets the value of DevicesOnline.
func (s *StatsResponse) SetDevicesOnline(val OptInt32) {
	s.DevicesOnline = val
}

// Ref: #/components/schemas/StatsResponseBaseResponse
type StatsResponseBaseResponse struct {
	Message OptNilString     `json:"message"`
	Data    OptStatsResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *StatsResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *StatsResponseBaseResponse) GetData() OptStatsResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *StatsResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *StatsResponseBaseResponse) SetData(val OptStatsResponse) {
	s.Data = val
}

// Ref: #/components/schemas/StringBaseResponse
type StringBaseResponse struct {
	Message OptNilString `json:"message"`
	Data    OptNilString `json:"data"`
}

// GetMessage returns the value of Message.
func (s *StringBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *StringBaseResponse) GetData() OptNilString {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *StringBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *StringBaseResponse) SetData(val OptNilString) {
	s.Data = val
}

func (*StringBaseResponse) devicePairDEPRECATEDRes() {}
func (*StringBaseResponse) devicePairRes()           {}
func (*StringBaseResponse) devicesGetPairCodeRes()   {}

// Ref: #/components/schemas/TokenResponse
type TokenResponse struct {
	ID          OptUUID                   `json:"id"`
	Name        OptNilString              `json:"name"`
	CreatedOn   OptDateTime               `json:"createdOn"`
	CreatedByIp OptNilString              `json:"createdByIp"`
	ValidUntil  OptNilDate                `json:"validUntil"`
	Permissions OptNilPermissionTypeArray `json:"permissions"`
}

// GetID returns the value of ID.
func (s *TokenResponse) GetID() OptUUID {
	return s.ID
}

// GetName returns the value of Name.
func (s *TokenResponse) GetName() OptNilString {
	return s.Name
}

// GetCreatedOn returns the value of CreatedOn.
func (s *TokenResponse) GetCreatedOn() OptDateTime {
	return s.CreatedOn
}

// GetCreatedByIp returns the value of CreatedByIp.
func (s *TokenResponse) GetCreatedByIp() OptNilString {
	return s.CreatedByIp
}

// GetValidUntil returns the value of ValidUntil.
func (s *TokenResponse) GetValidUntil() OptNilDate {
	return s.ValidUntil
}

// GetPermissions returns the value of Permissions.
func (s *TokenResponse) GetPermissions() OptNilPermissionTypeArray {
	return s.Permissions
}

// SetID sets the value of ID.
func (s *TokenResponse) SetID(val OptUUID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *TokenResponse) SetName(val OptNilString) {
	s.Name = val
}

// SetCreatedOn sets the value of CreatedOn.
func (s *TokenResponse) SetCreatedOn(val OptDateTime) {
	s.CreatedOn = val
}

// SetCreatedByIp sets the value of CreatedByIp.
func (s *TokenResponse) SetCreatedByIp(val OptNilString) {
	s.CreatedByIp = val
}

// SetValidUntil sets the value of ValidUntil.
func (s *TokenResponse) SetValidUntil(val OptNilDate) {
	s.ValidUntil = val
}

// SetPermissions sets the value of Permissions.
func (s *TokenResponse) SetPermissions(val OptNilPermissionTypeArray) {
	s.Permissions = val
}

// Ref: #/components/schemas/TokenResponseBaseResponse
type TokenResponseBaseResponse struct {
	Message OptNilString     `json:"message"`
	Data    OptTokenResponse `json:"data"`
}

// GetMessage returns the value of Message.
func (s *TokenResponseBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *TokenResponseBaseResponse) GetData() OptTokenResponse {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *TokenResponseBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *TokenResponseBaseResponse) SetData(val OptTokenResponse) {
	s.Data = val
}

func (*TokenResponseBaseResponse) tokensGetTokenByIdRes() {}

// Ref: #/components/schemas/TokenResponseIEnumerableBaseResponse
type TokenResponseIEnumerableBaseResponse struct {
	Message OptNilString             `json:"message"`
	Data    OptNilTokenResponseArray `json:"data"`
}

// GetMessage returns the value of Message.
func (s *TokenResponseIEnumerableBaseResponse) GetMessage() OptNilString {
	return s.Message
}

// GetData returns the value of Data.
func (s *TokenResponseIEnumerableBaseResponse) GetData() OptNilTokenResponseArray {
	return s.Data
}

// SetMessage sets the value of Message.
func (s *TokenResponseIEnumerableBaseResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetData sets the value of Data.
func (s *TokenResponseIEnumerableBaseResponse) SetData(val OptNilTokenResponseArray) {
	s.Data = val
}
